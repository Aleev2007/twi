
master_writer.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__ctors_end>
   4:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
   8:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
   c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  10:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  14:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  18:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  1c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  20:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  24:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  28:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  2c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  30:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  34:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  38:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  3c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  40:	0c 94 b1 01 	jmp	0x362	; 0x362 <__vector_16>
  44:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  48:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  4c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  50:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  54:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  58:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  5c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  60:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__vector_24>
  64:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	01 02       	muls	r16, r17
  6a:	04 08       	sbc	r0, r4
  6c:	10 20       	and	r1, r0
  6e:	40 80       	ld	r4, Z
  70:	01 02       	muls	r16, r17
  72:	04 08       	sbc	r0, r4
  74:	10 20       	and	r1, r0
  76:	01 02       	muls	r16, r17
  78:	04 08       	sbc	r0, r4
  7a:	10 20       	and	r1, r0

0000007c <port_to_output_PGM>:
  7c:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000086 <digital_pin_to_port_PGM>:
  86:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  96:	03 03 03 03                                         ....

0000009a <__ctors_start>:
  9a:	a7 04       	cpc	r10, r7

0000009c <__ctors_end>:
  9c:	11 24       	eor	r1, r1
  9e:	1f be       	out	0x3f, r1	; 63
  a0:	cf ef       	ldi	r28, 0xFF	; 255
  a2:	d8 e0       	ldi	r29, 0x08	; 8
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	cd bf       	out	0x3d, r28	; 61

000000a8 <__do_copy_data>:
  a8:	11 e0       	ldi	r17, 0x01	; 1
  aa:	a0 e0       	ldi	r26, 0x00	; 0
  ac:	b1 e0       	ldi	r27, 0x01	; 1
  ae:	e2 e9       	ldi	r30, 0x92	; 146
  b0:	f9 e0       	ldi	r31, 0x09	; 9
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x10>
  b4:	05 90       	lpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	ac 31       	cpi	r26, 0x1C	; 28
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0xc>

000000be <__do_clear_bss>:
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	ac e1       	ldi	r26, 0x1C	; 28
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	a9 3e       	cpi	r26, 0xE9	; 233
  ca:	b2 07       	cpc	r27, r18
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>

000000ce <__do_global_ctors>:
  ce:	10 e0       	ldi	r17, 0x00	; 0
  d0:	ce e4       	ldi	r28, 0x4E	; 78
  d2:	d0 e0       	ldi	r29, 0x00	; 0
  d4:	04 c0       	rjmp	.+8      	; 0xde <__do_global_ctors+0x10>
  d6:	21 97       	sbiw	r28, 0x01	; 1
  d8:	fe 01       	movw	r30, r28
  da:	0e 94 b8 04 	call	0x970	; 0x970 <__tablejump2__>
  de:	cd 34       	cpi	r28, 0x4D	; 77
  e0:	d1 07       	cpc	r29, r17
  e2:	c9 f7       	brne	.-14     	; 0xd6 <__do_global_ctors+0x8>
  e4:	0e 94 47 03 	call	0x68e	; 0x68e <main>
  e8:	0c 94 c7 04 	jmp	0x98e	; 0x98e <_exit>

000000ec <__bad_interrupt>:
  ec:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f0 <_ZN7TwoWire16onRequestServiceEv>:
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
  txBufferLength = 0;
  // alert user program
  user_onRequest();
}
  f0:	08 95       	ret

000000f2 <_ZN7TwoWire16onReceiveServiceEPhi>:
  // set rx iterator vars
  rxBufferIndex = 0;
  rxBufferLength = numBytes;
  // alert user program
  user_onReceive(numBytes);
}
  f2:	08 95       	ret

000000f4 <micros>:
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
  f4:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
  f6:	f8 94       	cli
	m = timer0_overflow_count;
  f8:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <timer0_overflow_count>
  fc:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <timer0_overflow_count+0x1>
 100:	a0 91 87 01 	lds	r26, 0x0187	; 0x800187 <timer0_overflow_count+0x2>
 104:	b0 91 88 01 	lds	r27, 0x0188	; 0x800188 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
 108:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 10a:	a8 9b       	sbis	0x15, 0	; 21
 10c:	05 c0       	rjmp	.+10     	; 0x118 <micros+0x24>
 10e:	2f 3f       	cpi	r18, 0xFF	; 255
 110:	19 f0       	breq	.+6      	; 0x118 <micros+0x24>
		m++;
 112:	01 96       	adiw	r24, 0x01	; 1
 114:	a1 1d       	adc	r26, r1
 116:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 118:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
 11a:	ba 2f       	mov	r27, r26
 11c:	a9 2f       	mov	r26, r25
 11e:	98 2f       	mov	r25, r24
 120:	88 27       	eor	r24, r24
 122:	bc 01       	movw	r22, r24
 124:	cd 01       	movw	r24, r26
 126:	62 0f       	add	r22, r18
 128:	71 1d       	adc	r23, r1
 12a:	81 1d       	adc	r24, r1
 12c:	91 1d       	adc	r25, r1
 12e:	42 e0       	ldi	r20, 0x02	; 2
 130:	66 0f       	add	r22, r22
 132:	77 1f       	adc	r23, r23
 134:	88 1f       	adc	r24, r24
 136:	99 1f       	adc	r25, r25
 138:	4a 95       	dec	r20
 13a:	d1 f7       	brne	.-12     	; 0x130 <micros+0x3c>
}
 13c:	08 95       	ret

0000013e <twi_init>:

//*************************************************************************************

void twi_init(void){
  // initialize state
  twi_state = TWI_READY;
 13e:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <twi_state>
  twi_sendStop = true;    // default value
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	90 93 b4 01 	sts	0x01B4, r25	; 0x8001b4 <twi_sendStop>
  twi_inRepStart = false;
 148:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <twi_inRepStart>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 14c:	f8 94       	cli
  volatile uint8_t *out;
  // activate internal pullups for twi.
  ATOMIC_BLOCK (ATOMIC_FORCEON){
    out = portOutputRegister (digitalPinToPort (SDA)); 
 14e:	e8 e9       	ldi	r30, 0x98	; 152
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	e4 91       	lpm	r30, Z
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	ee 0f       	add	r30, r30
 158:	ff 1f       	adc	r31, r31
 15a:	e4 58       	subi	r30, 0x84	; 132
 15c:	ff 4f       	sbci	r31, 0xFF	; 255
 15e:	a5 91       	lpm	r26, Z+
 160:	b4 91       	lpm	r27, Z
    *out |= (digitalPinToBitMask (SDA) | digitalPinToBitMask (SCL));
 162:	ea e7       	ldi	r30, 0x7A	; 122
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	84 91       	lpm	r24, Z
 168:	eb e7       	ldi	r30, 0x7B	; 123
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	e4 91       	lpm	r30, Z
 16e:	2c 91       	ld	r18, X
 170:	e8 2b       	or	r30, r24
 172:	e2 2b       	or	r30, r18
 174:	ec 93       	st	X, r30
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 176:	78 94       	sei
  }
  // initialize twi prescaler and bit rate
  TWSR = 1;  // TWI Bit Rate Prescaler = 4
 178:	90 93 b9 00 	sts	0x00B9, r25	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     TWI Bit Rate for 16MHz MCU
     400 kHz - TWBR = 3
     100 kHz - TWBR = 18
      10 kHz - TWBR = 198
  */
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
 17c:	88 e4       	ldi	r24, 0x48	; 72
 17e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
  // enable twi module, acknowledge bit, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
 182:	85 e4       	ldi	r24, 0x45	; 69
 184:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
}
 188:	08 95       	ret

0000018a <twi_stop>:
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
  }
}

void twi_stop(void){
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	00 d0       	rcall	.+0      	; 0x190 <twi_stop+0x6>
 190:	1f 92       	push	r1
 192:	cd b7       	in	r28, 0x3d	; 61
 194:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t counter_1;
  volatile uint8_t counter_2;
  volatile uint8_t counter_3;
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWSTO);
 196:	85 e9       	ldi	r24, 0x95	; 149
 198:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  if (!twi_timeout_off_flag){
 19c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <twi_timeout_off_flag>
 1a0:	81 11       	cpse	r24, r1
 1a2:	09 c0       	rjmp	.+18     	; 0x1b6 <twi_stop+0x2c>
    counter_1 = set_1;
 1a4:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <set_1>
 1a8:	89 83       	std	Y+1, r24	; 0x01
    counter_2 = set_2;
 1aa:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <set_2>
 1ae:	8a 83       	std	Y+2, r24	; 0x02
    counter_3 = set_3;
 1b0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1b4:	8b 83       	std	Y+3, r24	; 0x03
  }  
check:                                        // написать это без goto пока не хватает ума. :)
  if (!(TWCR & _BV(TWSTO))) goto go;
 1b6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 1ba:	84 ff       	sbrs	r24, 4
 1bc:	1c c0       	rjmp	.+56     	; 0x1f6 <twi_stop+0x6c>
  if (twi_timeout_off_flag) goto check;
 1be:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <twi_timeout_off_flag>
 1c2:	81 11       	cpse	r24, r1
 1c4:	f8 cf       	rjmp	.-16     	; 0x1b6 <twi_stop+0x2c>
  if (!(--counter_1)) goto check;
 1c6:	89 81       	ldd	r24, Y+1	; 0x01
 1c8:	81 50       	subi	r24, 0x01	; 1
 1ca:	89 83       	std	Y+1, r24	; 0x01
 1cc:	88 23       	and	r24, r24
 1ce:	99 f3       	breq	.-26     	; 0x1b6 <twi_stop+0x2c>
  if (!(--counter_2)) goto check;
 1d0:	8a 81       	ldd	r24, Y+2	; 0x02
 1d2:	81 50       	subi	r24, 0x01	; 1
 1d4:	8a 83       	std	Y+2, r24	; 0x02
 1d6:	88 23       	and	r24, r24
 1d8:	71 f3       	breq	.-36     	; 0x1b6 <twi_stop+0x2c>
  if (!(--counter_3)) goto check;
 1da:	8b 81       	ldd	r24, Y+3	; 0x03
 1dc:	81 50       	subi	r24, 0x01	; 1
 1de:	8b 83       	std	Y+3, r24	; 0x03
 1e0:	88 23       	and	r24, r24
 1e2:	49 f3       	breq	.-46     	; 0x1b6 <twi_stop+0x2c>
  twi_handleTimeout(twi_do_reset_on_timeout); // с этим подумать, возможно выставить флаг здесь.
 1e4:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <twi_do_reset_on_timeout>
  return; //timeout
go:
  // update twi state
  twi_state = TWI_READY;
}
 1e8:	0f 90       	pop	r0
 1ea:	0f 90       	pop	r0
 1ec:	0f 90       	pop	r0
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
  if (!(TWCR & _BV(TWSTO))) goto go;
  if (twi_timeout_off_flag) goto check;
  if (!(--counter_1)) goto check;
  if (!(--counter_2)) goto check;
  if (!(--counter_3)) goto check;
  twi_handleTimeout(twi_do_reset_on_timeout); // с этим подумать, возможно выставить флаг здесь.
 1f2:	0c 94 1a 03 	jmp	0x634	; 0x634 <twi_handleTimeout>
  return; //timeout
go:
  // update twi state
  twi_state = TWI_READY;
 1f6:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <twi_state>
}
 1fa:	0f 90       	pop	r0
 1fc:	0f 90       	pop	r0
 1fe:	0f 90       	pop	r0
 200:	df 91       	pop	r29
 202:	cf 91       	pop	r28
 204:	08 95       	ret

00000206 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
 206:	08 95       	ret

00000208 <_ZN7TwoWire4peekEv>:
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
  
  if(rxBufferIndex < rxBufferLength){
 208:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <_ZN7TwoWire13rxBufferIndexE>
 20c:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <_ZN7TwoWire14rxBufferLengthE>
 210:	e8 17       	cp	r30, r24
 212:	30 f4       	brcc	.+12     	; 0x220 <_ZN7TwoWire4peekEv+0x18>
    value = rxBuffer[rxBufferIndex];
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	e4 5e       	subi	r30, 0xE4	; 228
 218:	fe 4f       	sbci	r31, 0xFE	; 254
 21a:	80 81       	ld	r24, Z
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	08 95       	ret
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
 220:	8f ef       	ldi	r24, 0xFF	; 255
 222:	9f ef       	ldi	r25, 0xFF	; 255
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
 224:	08 95       	ret

00000226 <_ZN7TwoWire4readEv>:
int TwoWire::read(void)
{
  int value = -1;
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
 226:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <_ZN7TwoWire13rxBufferIndexE>
 22a:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <_ZN7TwoWire14rxBufferLengthE>
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
 22e:	2f ef       	ldi	r18, 0xFF	; 255
 230:	3f ef       	ldi	r19, 0xFF	; 255
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
 232:	98 17       	cp	r25, r24
 234:	48 f4       	brcc	.+18     	; 0x248 <_ZN7TwoWire4readEv+0x22>
    value = rxBuffer[rxBufferIndex];
 236:	e9 2f       	mov	r30, r25
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	e4 5e       	subi	r30, 0xE4	; 228
 23c:	fe 4f       	sbci	r31, 0xFE	; 254
 23e:	20 81       	ld	r18, Z
 240:	30 e0       	ldi	r19, 0x00	; 0
    ++rxBufferIndex;
 242:	9f 5f       	subi	r25, 0xFF	; 255
 244:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <_ZN7TwoWire13rxBufferIndexE>
  }

  return value;
}
 248:	c9 01       	movw	r24, r18
 24a:	08 95       	ret

0000024c <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
 24c:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <_ZN7TwoWire14rxBufferLengthE>
 250:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <_ZN7TwoWire13rxBufferIndexE>
}
 254:	89 1b       	sub	r24, r25
 256:	99 0b       	sbc	r25, r25
 258:	08 95       	ret

0000025a <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	08 95       	ret

00000260 <twi_transmit>:
  /* twi bit rate formula from atmega128 manual pg 204
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR * Prescaler))*/
  
}

uint8_t twi_transmit(const uint8_t* data, uint8_t length){
 260:	cf 93       	push	r28
  uint8_t *p = &twi_txBuffer;
  
  // !!! нужно избавиться от 3х буферов
  
  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < (twi_txBufferLength+length)) return 1;
 262:	20 91 5d 01 	lds	r18, 0x015D	; 0x80015d <twi_txBufferLength>
 266:	46 2f       	mov	r20, r22
 268:	50 e0       	ldi	r21, 0x00	; 0
 26a:	24 0f       	add	r18, r20
 26c:	35 2f       	mov	r19, r21
 26e:	31 1d       	adc	r19, r1
 270:	21 32       	cpi	r18, 0x21	; 33
 272:	31 05       	cpc	r19, r1
 274:	b4 f4       	brge	.+44     	; 0x2a2 <twi_transmit+0x42>
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state) return 2;
 276:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <twi_state>
 27a:	24 30       	cpi	r18, 0x04	; 4
 27c:	a1 f4       	brne	.+40     	; 0x2a6 <twi_transmit+0x46>
 27e:	c6 2f       	mov	r28, r22
 280:	bc 01       	movw	r22, r24
  
  // set length and copy data into tx buffer
  memcpy(p + twi_txBufferLength, data, length);
 282:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <twi_txBufferLength>
 286:	89 2f       	mov	r24, r25
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	83 5c       	subi	r24, 0xC3	; 195
 28c:	9e 4f       	sbci	r25, 0xFE	; 254
 28e:	0e 94 be 04 	call	0x97c	; 0x97c <memcpy>
  twi_txBufferLength += length;
 292:	60 91 5d 01 	lds	r22, 0x015D	; 0x80015d <twi_txBufferLength>
 296:	6c 0f       	add	r22, r28
 298:	60 93 5d 01 	sts	0x015D, r22	; 0x80015d <twi_txBufferLength>
 29c:	80 e0       	ldi	r24, 0x00	; 0
  
  return 0;
}
 29e:	cf 91       	pop	r28
 2a0:	08 95       	ret
  uint8_t *p = &twi_txBuffer;
  
  // !!! нужно избавиться от 3х буферов
  
  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < (twi_txBufferLength+length)) return 1;
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	fc cf       	rjmp	.-8      	; 0x29e <twi_transmit+0x3e>
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state) return 2;
 2a6:	82 e0       	ldi	r24, 0x02	; 2
 2a8:	fa cf       	rjmp	.-12     	; 0x29e <twi_transmit+0x3e>

000002aa <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 2aa:	cf 92       	push	r12
 2ac:	df 92       	push	r13
 2ae:	ef 92       	push	r14
 2b0:	ff 92       	push	r15
 2b2:	0f 93       	push	r16
 2b4:	1f 93       	push	r17
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	7c 01       	movw	r14, r24
 2bc:	cb 01       	movw	r24, r22
 2be:	8a 01       	movw	r16, r20
  if(transmitting){
 2c0:	20 91 b8 01 	lds	r18, 0x01B8	; 0x8001b8 <_ZN7TwoWire12transmittingE>
 2c4:	22 23       	and	r18, r18
 2c6:	89 f0       	breq	.+34     	; 0x2ea <_ZN7TwoWire5writeEPKhj+0x40>
 2c8:	eb 01       	movw	r28, r22
 2ca:	6b 01       	movw	r12, r22
 2cc:	c4 0e       	add	r12, r20
 2ce:	d5 1e       	adc	r13, r21
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
 2d0:	cc 15       	cp	r28, r12
 2d2:	dd 05       	cpc	r29, r13
 2d4:	69 f0       	breq	.+26     	; 0x2f0 <_ZN7TwoWire5writeEPKhj+0x46>
      write(data[i]);
 2d6:	69 91       	ld	r22, Y+
 2d8:	d7 01       	movw	r26, r14
 2da:	ed 91       	ld	r30, X+
 2dc:	fc 91       	ld	r31, X
 2de:	01 90       	ld	r0, Z+
 2e0:	f0 81       	ld	r31, Z
 2e2:	e0 2d       	mov	r30, r0
 2e4:	c7 01       	movw	r24, r14
 2e6:	09 95       	icall
 2e8:	f3 cf       	rjmp	.-26     	; 0x2d0 <_ZN7TwoWire5writeEPKhj+0x26>
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
 2ea:	64 2f       	mov	r22, r20
 2ec:	0e 94 30 01 	call	0x260	; 0x260 <twi_transmit>
  }
  return quantity;
}
 2f0:	c8 01       	movw	r24, r16
 2f2:	df 91       	pop	r29
 2f4:	cf 91       	pop	r28
 2f6:	1f 91       	pop	r17
 2f8:	0f 91       	pop	r16
 2fa:	ff 90       	pop	r15
 2fc:	ef 90       	pop	r14
 2fe:	df 90       	pop	r13
 300:	cf 90       	pop	r12
 302:	08 95       	ret

00000304 <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
 304:	cf 93       	push	r28
 306:	df 93       	push	r29
 308:	1f 92       	push	r1
 30a:	cd b7       	in	r28, 0x3d	; 61
 30c:	de b7       	in	r29, 0x3e	; 62
 30e:	69 83       	std	Y+1, r22	; 0x01
  if(transmitting){
 310:	20 91 b8 01 	lds	r18, 0x01B8	; 0x8001b8 <_ZN7TwoWire12transmittingE>
 314:	22 23       	and	r18, r18
 316:	f9 f0       	breq	.+62     	; 0x356 <_ZN7TwoWire5writeEh+0x52>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
 318:	20 91 db 01 	lds	r18, 0x01DB	; 0x8001db <_ZN7TwoWire14txBufferLengthE>
 31c:	20 32       	cpi	r18, 0x20	; 32
 31e:	58 f0       	brcs	.+22     	; 0x336 <_ZN7TwoWire5writeEh+0x32>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
 320:	21 e0       	ldi	r18, 0x01	; 1
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	fc 01       	movw	r30, r24
 326:	33 83       	std	Z+3, r19	; 0x03
 328:	22 83       	std	Z+2, r18	; 0x02
      setWriteError();
      return 0;
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	80 e0       	ldi	r24, 0x00	; 0
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
}
 32e:	0f 90       	pop	r0
 330:	df 91       	pop	r29
 332:	cf 91       	pop	r28
 334:	08 95       	ret
    if(txBufferLength >= BUFFER_LENGTH){
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
 336:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <_ZN7TwoWire13txBufferIndexE>
 33a:	e8 2f       	mov	r30, r24
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	e6 54       	subi	r30, 0x46	; 70
 340:	fe 4f       	sbci	r31, 0xFE	; 254
 342:	99 81       	ldd	r25, Y+1	; 0x01
 344:	90 83       	st	Z, r25
    ++txBufferIndex;
 346:	8f 5f       	subi	r24, 0xFF	; 255
 348:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <_ZN7TwoWire13txBufferIndexE>
    // update amount in buffer   
    txBufferLength = txBufferIndex;
 34c:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <_ZN7TwoWire14txBufferLengthE>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	ec cf       	rjmp	.-40     	; 0x32e <_ZN7TwoWire5writeEh+0x2a>
    // update amount in buffer   
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
 356:	61 e0       	ldi	r22, 0x01	; 1
 358:	ce 01       	movw	r24, r28
 35a:	01 96       	adiw	r24, 0x01	; 1
 35c:	0e 94 30 01 	call	0x260	; 0x260 <twi_transmit>
 360:	f7 cf       	rjmp	.-18     	; 0x350 <_ZN7TwoWire5writeEh+0x4c>

00000362 <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
 362:	1f 92       	push	r1
 364:	0f 92       	push	r0
 366:	0f b6       	in	r0, 0x3f	; 63
 368:	0f 92       	push	r0
 36a:	11 24       	eor	r1, r1
 36c:	2f 93       	push	r18
 36e:	3f 93       	push	r19
 370:	8f 93       	push	r24
 372:	9f 93       	push	r25
 374:	af 93       	push	r26
 376:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 378:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <timer0_millis>
 37c:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <timer0_millis+0x1>
 380:	a0 91 83 01 	lds	r26, 0x0183	; 0x800183 <timer0_millis+0x2>
 384:	b0 91 84 01 	lds	r27, 0x0184	; 0x800184 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
 388:	30 91 80 01 	lds	r19, 0x0180	; 0x800180 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
 38c:	23 e0       	ldi	r18, 0x03	; 3
 38e:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
 390:	2d 37       	cpi	r18, 0x7D	; 125
 392:	58 f5       	brcc	.+86     	; 0x3ea <__vector_16+0x88>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
 394:	01 96       	adiw	r24, 0x01	; 1
 396:	a1 1d       	adc	r26, r1
 398:	b1 1d       	adc	r27, r1
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
		m += 1;
	}

	timer0_fract = f;
 39a:	20 93 80 01 	sts	0x0180, r18	; 0x800180 <timer0_fract>
	timer0_millis = m;
 39e:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <timer0_millis>
 3a2:	90 93 82 01 	sts	0x0182, r25	; 0x800182 <timer0_millis+0x1>
 3a6:	a0 93 83 01 	sts	0x0183, r26	; 0x800183 <timer0_millis+0x2>
 3aa:	b0 93 84 01 	sts	0x0184, r27	; 0x800184 <timer0_millis+0x3>
	timer0_overflow_count++;
 3ae:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <timer0_overflow_count>
 3b2:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <timer0_overflow_count+0x1>
 3b6:	a0 91 87 01 	lds	r26, 0x0187	; 0x800187 <timer0_overflow_count+0x2>
 3ba:	b0 91 88 01 	lds	r27, 0x0188	; 0x800188 <timer0_overflow_count+0x3>
 3be:	01 96       	adiw	r24, 0x01	; 1
 3c0:	a1 1d       	adc	r26, r1
 3c2:	b1 1d       	adc	r27, r1
 3c4:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <timer0_overflow_count>
 3c8:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <timer0_overflow_count+0x1>
 3cc:	a0 93 87 01 	sts	0x0187, r26	; 0x800187 <timer0_overflow_count+0x2>
 3d0:	b0 93 88 01 	sts	0x0188, r27	; 0x800188 <timer0_overflow_count+0x3>
}
 3d4:	bf 91       	pop	r27
 3d6:	af 91       	pop	r26
 3d8:	9f 91       	pop	r25
 3da:	8f 91       	pop	r24
 3dc:	3f 91       	pop	r19
 3de:	2f 91       	pop	r18
 3e0:	0f 90       	pop	r0
 3e2:	0f be       	out	0x3f, r0	; 63
 3e4:	0f 90       	pop	r0
 3e6:	1f 90       	pop	r1
 3e8:	18 95       	reti
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
 3ea:	26 e8       	ldi	r18, 0x86	; 134
 3ec:	23 0f       	add	r18, r19
		m += 1;
 3ee:	02 96       	adiw	r24, 0x02	; 2
 3f0:	a1 1d       	adc	r26, r1
 3f2:	b1 1d       	adc	r27, r1
 3f4:	d2 cf       	rjmp	.-92     	; 0x39a <__vector_16+0x38>

000003f6 <__vector_24>:
  // copy twi buffer to data
  memcpy(data, &twi_masterBuffer, length);
  return length;
}

ISR(TWI_vect){
 3f6:	1f 92       	push	r1
 3f8:	0f 92       	push	r0
 3fa:	0f b6       	in	r0, 0x3f	; 63
 3fc:	0f 92       	push	r0
 3fe:	11 24       	eor	r1, r1
 400:	2f 93       	push	r18
 402:	3f 93       	push	r19
 404:	4f 93       	push	r20
 406:	5f 93       	push	r21
 408:	6f 93       	push	r22
 40a:	7f 93       	push	r23
 40c:	8f 93       	push	r24
 40e:	9f 93       	push	r25
 410:	af 93       	push	r26
 412:	bf 93       	push	r27
 414:	ef 93       	push	r30
 416:	ff 93       	push	r31
  switch(TW_STATUS){
 418:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 41c:	88 7f       	andi	r24, 0xF8	; 248
 41e:	80 36       	cpi	r24, 0x60	; 96
 420:	09 f4       	brne	.+2      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 422:	4a c0       	rjmp	.+148    	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 424:	f0 f5       	brcc	.+124    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 426:	88 32       	cpi	r24, 0x28	; 40
 428:	09 f4       	brne	.+2      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 42a:	a7 c0       	rjmp	.+334    	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
 42c:	18 f5       	brcc	.+70     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 42e:	80 31       	cpi	r24, 0x10	; 16
 430:	09 f4       	brne	.+2      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 432:	9b c0       	rjmp	.+310    	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
 434:	b8 f4       	brcc	.+46     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 436:	88 23       	and	r24, r24
 438:	09 f4       	brne	.+2      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 43a:	f9 c0       	rjmp	.+498    	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
 43c:	88 30       	cpi	r24, 0x08	; 8
 43e:	09 f4       	brne	.+2      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 440:	94 c0       	rjmp	.+296    	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
 442:	ff 91       	pop	r31
 444:	ef 91       	pop	r30
 446:	bf 91       	pop	r27
 448:	af 91       	pop	r26
 44a:	9f 91       	pop	r25
 44c:	8f 91       	pop	r24
 44e:	7f 91       	pop	r23
 450:	6f 91       	pop	r22
 452:	5f 91       	pop	r21
 454:	4f 91       	pop	r20
 456:	3f 91       	pop	r19
 458:	2f 91       	pop	r18
 45a:	0f 90       	pop	r0
 45c:	0f be       	out	0x3f, r0	; 63
 45e:	0f 90       	pop	r0
 460:	1f 90       	pop	r1
 462:	18 95       	reti
  memcpy(data, &twi_masterBuffer, length);
  return length;
}

ISR(TWI_vect){
  switch(TW_STATUS){
 464:	88 31       	cpi	r24, 0x18	; 24
 466:	09 f4       	brne	.+2      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 468:	88 c0       	rjmp	.+272    	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
 46a:	80 32       	cpi	r24, 0x20	; 32
 46c:	51 f7       	brne	.-44     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
 46e:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <twi_error>
 472:	14 c0       	rjmp	.+40     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
  memcpy(data, &twi_masterBuffer, length);
  return length;
}

ISR(TWI_vect){
  switch(TW_STATUS){
 474:	80 34       	cpi	r24, 0x40	; 64
 476:	09 f4       	brne	.+2      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 478:	9d c0       	rjmp	.+314    	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
 47a:	40 f4       	brcc	.+16     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 47c:	80 33       	cpi	r24, 0x30	; 48
 47e:	b9 f3       	breq	.-18     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 480:	88 33       	cpi	r24, 0x38	; 56
 482:	f9 f6       	brne	.-66     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
 484:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <twi_error>
void twi_attachSlaveTxEvent( void (*function)(void) ) {twi_onSlaveTransmit = function;}

inline void twi_reply(bool ack){
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
 488:	85 ec       	ldi	r24, 0xC5	; 197
 48a:	b0 c0       	rjmp	.+352    	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
  memcpy(data, &twi_masterBuffer, length);
  return length;
}

ISR(TWI_vect){
  switch(TW_STATUS){
 48c:	80 35       	cpi	r24, 0x50	; 80
 48e:	09 f4       	brne	.+2      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 490:	85 c0       	rjmp	.+266    	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
 492:	88 35       	cpi	r24, 0x58	; 88
 494:	09 f4       	brne	.+2      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 496:	96 c0       	rjmp	.+300    	; 0x5c4 <__LOCK_REGION_LENGTH__+0x1c4>
 498:	88 34       	cpi	r24, 0x48	; 72
 49a:	99 f6       	brne	.-90     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
 49c:	0e 94 c5 00 	call	0x18a	; 0x18a <twi_stop>
 4a0:	d0 cf       	rjmp	.-96     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
  memcpy(data, &twi_masterBuffer, length);
  return length;
}

ISR(TWI_vect){
  switch(TW_STATUS){
 4a2:	88 39       	cpi	r24, 0x98	; 152
 4a4:	09 f4       	brne	.+2      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 4a6:	8c c0       	rjmp	.+280    	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
 4a8:	38 f5       	brcc	.+78     	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
 4aa:	88 37       	cpi	r24, 0x78	; 120
 4ac:	29 f0       	breq	.+10     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 4ae:	50 f4       	brcc	.+20     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
 4b0:	88 36       	cpi	r24, 0x68	; 104
 4b2:	11 f0       	breq	.+4      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 4b4:	80 37       	cpi	r24, 0x70	; 112
 4b6:	29 f6       	brne	.-118    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
 4b8:	83 e0       	ldi	r24, 0x03	; 3
 4ba:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
 4be:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <twi_rxBufferIndex>
 4c2:	57 c0       	rjmp	.+174    	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
  memcpy(data, &twi_masterBuffer, length);
  return length;
}

ISR(TWI_vect){
  switch(TW_STATUS){
 4c4:	88 38       	cpi	r24, 0x88	; 136
 4c6:	09 f4       	brne	.+2      	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
 4c8:	7b c0       	rjmp	.+246    	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
 4ca:	80 39       	cpi	r24, 0x90	; 144
 4cc:	19 f0       	breq	.+6      	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
 4ce:	80 38       	cpi	r24, 0x80	; 128
 4d0:	09 f0       	breq	.+2      	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
 4d2:	b7 cf       	rjmp	.-146    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
 4d4:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <twi_rxBufferIndex>
 4d8:	80 32       	cpi	r24, 0x20	; 32
 4da:	08 f0       	brcs	.+2      	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
 4dc:	71 c0       	rjmp	.+226    	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
 4de:	e0 91 7f 01 	lds	r30, 0x017F	; 0x80017f <twi_rxBufferIndex>
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	8e 0f       	add	r24, r30
 4e6:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <twi_rxBufferIndex>
 4ea:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 4ee:	f0 e0       	ldi	r31, 0x00	; 0
 4f0:	e1 5a       	subi	r30, 0xA1	; 161
 4f2:	fe 4f       	sbci	r31, 0xFE	; 254
 4f4:	80 83       	st	Z, r24
 4f6:	3d c0       	rjmp	.+122    	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
  memcpy(data, &twi_masterBuffer, length);
  return length;
}

ISR(TWI_vect){
  switch(TW_STATUS){
 4f8:	80 3b       	cpi	r24, 0xB0	; 176
 4fa:	39 f0       	breq	.+14     	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
 4fc:	e0 f4       	brcc	.+56     	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
 4fe:	80 3a       	cpi	r24, 0xA0	; 160
 500:	09 f4       	brne	.+2      	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
 502:	79 c0       	rjmp	.+242    	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
 504:	88 3a       	cpi	r24, 0xA8	; 168
 506:	09 f0       	breq	.+2      	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
 508:	9c cf       	rjmp	.-200    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
 50a:	84 e0       	ldi	r24, 0x04	; 4
 50c:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
 510:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
 514:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
 518:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <twi_onSlaveTransmit>
 51c:	f0 91 8c 01 	lds	r31, 0x018C	; 0x80018c <twi_onSlaveTransmit+0x1>
 520:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
 522:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <twi_txBufferLength>
 526:	81 11       	cpse	r24, r1
 528:	0f c0       	rjmp	.+30     	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
        twi_txBufferLength = 1;
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
 530:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <twi_txBuffer>
 534:	09 c0       	rjmp	.+18     	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
  memcpy(data, &twi_masterBuffer, length);
  return length;
}

ISR(TWI_vect){
  switch(TW_STATUS){
 536:	80 3c       	cpi	r24, 0xC0	; 192
 538:	09 f4       	brne	.+2      	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
 53a:	a6 cf       	rjmp	.-180    	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 53c:	88 3c       	cpi	r24, 0xC8	; 200
 53e:	09 f4       	brne	.+2      	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
 540:	a3 cf       	rjmp	.-186    	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 542:	88 3b       	cpi	r24, 0xB8	; 184
 544:	09 f0       	breq	.+2      	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
 546:	7d cf       	rjmp	.-262    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
      }
      __attribute__ ((fallthrough));      
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
 548:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <twi_txBufferIndex>
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	8e 0f       	add	r24, r30
 550:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <twi_txBufferIndex>
 554:	f0 e0       	ldi	r31, 0x00	; 0
 556:	e3 5c       	subi	r30, 0xC3	; 195
 558:	fe 4f       	sbci	r31, 0xFE	; 254
 55a:	80 81       	ld	r24, Z
 55c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
 560:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <twi_txBufferIndex>
 564:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <twi_txBufferLength>
 568:	29 c0       	rjmp	.+82     	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
 56a:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <twi_slarw>
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
 56e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
void twi_attachSlaveTxEvent( void (*function)(void) ) {twi_onSlaveTransmit = function;}

inline void twi_reply(bool ack){
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
 572:	85 ec       	ldi	r24, 0xC5	; 197
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
 574:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 578:	64 cf       	rjmp	.-312    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
 57a:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <twi_masterBufferIndex>
 57e:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <twi_masterBufferLength>
 582:	98 17       	cp	r25, r24
 584:	58 f5       	brcc	.+86     	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
 586:	e0 91 b2 01 	lds	r30, 0x01B2	; 0x8001b2 <twi_masterBufferIndex>
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	8e 0f       	add	r24, r30
 58e:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <twi_masterBufferIndex>
 592:	f0 e0       	ldi	r31, 0x00	; 0
 594:	ef 56       	subi	r30, 0x6F	; 111
 596:	fe 4f       	sbci	r31, 0xFE	; 254
 598:	80 81       	ld	r24, Z
 59a:	e9 cf       	rjmp	.-46     	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
 59c:	e0 91 b2 01 	lds	r30, 0x01B2	; 0x8001b2 <twi_masterBufferIndex>
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	8e 0f       	add	r24, r30
 5a4:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <twi_masterBufferIndex>
 5a8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 5ac:	f0 e0       	ldi	r31, 0x00	; 0
 5ae:	ef 56       	subi	r30, 0x6F	; 111
 5b0:	fe 4f       	sbci	r31, 0xFE	; 254
 5b2:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
 5b4:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <twi_masterBufferIndex>
 5b8:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <twi_masterBufferLength>
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
 5bc:	98 17       	cp	r25, r24
 5be:	c8 f2       	brcs	.-78     	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
inline void twi_reply(bool ack){
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
 5c0:	85 e8       	ldi	r24, 0x85	; 133
 5c2:	d8 cf       	rjmp	.-80     	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
 5c4:	e0 91 b2 01 	lds	r30, 0x01B2	; 0x8001b2 <twi_masterBufferIndex>
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	8e 0f       	add	r24, r30
 5cc:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <twi_masterBufferIndex>
 5d0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 5d4:	f0 e0       	ldi	r31, 0x00	; 0
 5d6:	ef 56       	subi	r30, 0x6F	; 111
 5d8:	fe 4f       	sbci	r31, 0xFE	; 254
 5da:	80 83       	st	Z, r24
      if (twi_sendStop){
 5dc:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <twi_sendStop>
 5e0:	81 11       	cpse	r24, r1
 5e2:	5c cf       	rjmp	.-328    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
        twi_stop();
      } else {
        twi_inRepStart = true;  // we're gonna send the START
 5e4:	81 e0       	ldi	r24, 0x01	; 1
 5e6:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <twi_inRepStart>
        // don't enable the interrupt. We'll generate the start, but we
        // avoid handling the interrupt until we're in the next transaction,
        // at the point where we would normally issue the start.
        TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
 5ea:	84 ea       	ldi	r24, 0xA4	; 164
void twi_attachSlaveTxEvent( void (*function)(void) ) {twi_onSlaveTransmit = function;}

inline void twi_reply(bool ack){
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
 5ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
 5f0:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <twi_state>
 5f4:	26 cf       	rjmp	.-436    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
  twi_state = TWI_READY;
}

void twi_releaseBus(void){
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
 5f6:	85 ec       	ldi	r24, 0xC5	; 197
 5f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
  // update twi state
  twi_state = TWI_READY;
 5fc:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <twi_state>
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
 600:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <twi_rxBufferIndex>
 604:	80 32       	cpi	r24, 0x20	; 32
 606:	30 f4       	brcc	.+12     	; 0x614 <__LOCK_REGION_LENGTH__+0x214>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
 608:	e0 91 7f 01 	lds	r30, 0x017F	; 0x80017f <twi_rxBufferIndex>
 60c:	f0 e0       	ldi	r31, 0x00	; 0
 60e:	e1 5a       	subi	r30, 0xA1	; 161
 610:	fe 4f       	sbci	r31, 0xFE	; 254
 612:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
 614:	60 91 7f 01 	lds	r22, 0x017F	; 0x80017f <twi_rxBufferIndex>
 618:	70 e0       	ldi	r23, 0x00	; 0
 61a:	e0 91 89 01 	lds	r30, 0x0189	; 0x800189 <twi_onSlaveReceive>
 61e:	f0 91 8a 01 	lds	r31, 0x018A	; 0x80018a <twi_onSlaveReceive+0x1>
 622:	8f e5       	ldi	r24, 0x5F	; 95
 624:	91 e0       	ldi	r25, 0x01	; 1
 626:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
 628:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <twi_rxBufferIndex>
 62c:	0a cf       	rjmp	.-492    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
 62e:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <twi_error>
 632:	34 cf       	rjmp	.-408    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>

00000634 <twi_handleTimeout>:
    set_2 = (timeout & 0x00FF00UL) >> 8;
    set_3 = (timeout & 0xFF0000UL) >> 16;
  }
}

void twi_handleTimeout(bool reset){ 
 634:	cf 93       	push	r28
 636:	df 93       	push	r29
  twi_timed_out_flag = true; 
 638:	91 e0       	ldi	r25, 0x01	; 1
 63a:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <twi_timed_out_flag>

  if (reset) {
 63e:	88 23       	and	r24, r24
 640:	19 f1       	breq	.+70     	; 0x688 <twi_handleTimeout+0x54>
    // remember bitrate and address settings
    uint8_t previous_TWBR = TWBR;
 642:	c0 91 b8 00 	lds	r28, 0x00B8	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    uint8_t previous_TWAR = TWAR;
 646:	d0 91 ba 00 	lds	r29, 0x00BA	; 0x8000ba <__DATA_REGION_ORIGIN__+0x5a>
}

void twi_disable(void){
  volatile uint8_t *out;
  // disable twi module
  TWCR = 0;
 64a:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 64e:	f8 94       	cli
  // deactivate internal pullups for twi.
  ATOMIC_BLOCK (ATOMIC_FORCEON){
    out = portOutputRegister (digitalPinToPort (SDA)); 
 650:	e8 e9       	ldi	r30, 0x98	; 152
 652:	f0 e0       	ldi	r31, 0x00	; 0
 654:	e4 91       	lpm	r30, Z
 656:	f0 e0       	ldi	r31, 0x00	; 0
 658:	ee 0f       	add	r30, r30
 65a:	ff 1f       	adc	r31, r31
 65c:	e4 58       	subi	r30, 0x84	; 132
 65e:	ff 4f       	sbci	r31, 0xFF	; 255
 660:	a5 91       	lpm	r26, Z+
 662:	b4 91       	lpm	r27, Z
    *out &= (~ digitalPinToBitMask (SDA) & ~ digitalPinToBitMask (SCL));
 664:	ea e7       	ldi	r30, 0x7A	; 122
 666:	f0 e0       	ldi	r31, 0x00	; 0
 668:	84 91       	lpm	r24, Z
 66a:	eb e7       	ldi	r30, 0x7B	; 123
 66c:	f0 e0       	ldi	r31, 0x00	; 0
 66e:	e4 91       	lpm	r30, Z
 670:	9c 91       	ld	r25, X
 672:	e8 2b       	or	r30, r24
 674:	e0 95       	com	r30
 676:	e9 23       	and	r30, r25
 678:	ec 93       	st	X, r30
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 67a:	78 94       	sei
    uint8_t previous_TWBR = TWBR;
    uint8_t previous_TWAR = TWAR;

    // reset the interface
    twi_disable();
    twi_init();
 67c:	0e 94 9f 00 	call	0x13e	; 0x13e <twi_init>

    // reapply the previous register values
    TWAR = previous_TWAR;
 680:	d0 93 ba 00 	sts	0x00BA, r29	; 0x8000ba <__DATA_REGION_ORIGIN__+0x5a>
    TWBR = previous_TWBR;
 684:	c0 93 b8 00 	sts	0x00B8, r28	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
  }
}
 688:	df 91       	pop	r29
 68a:	cf 91       	pop	r28
 68c:	08 95       	ret

0000068e <main>:

void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
 68e:	cf 93       	push	r28
 690:	df 93       	push	r29
 692:	00 d0       	rcall	.+0      	; 0x694 <main+0x6>
 694:	1f 92       	push	r1
 696:	cd b7       	in	r28, 0x3d	; 61
 698:	de b7       	in	r29, 0x3e	; 62

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 69a:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 69c:	84 b5       	in	r24, 0x24	; 36
 69e:	82 60       	ori	r24, 0x02	; 2
 6a0:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 6a2:	84 b5       	in	r24, 0x24	; 36
 6a4:	81 60       	ori	r24, 0x01	; 1
 6a6:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 6a8:	85 b5       	in	r24, 0x25	; 37
 6aa:	82 60       	ori	r24, 0x02	; 2
 6ac:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 6ae:	85 b5       	in	r24, 0x25	; 37
 6b0:	81 60       	ori	r24, 0x01	; 1
 6b2:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 6b4:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
 6b8:	81 60       	ori	r24, 0x01	; 1
 6ba:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 6be:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 6c2:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
 6c6:	82 60       	ori	r24, 0x02	; 2
 6c8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 6cc:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
 6d0:	81 60       	ori	r24, 0x01	; 1
 6d2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 6d6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 6da:	81 60       	ori	r24, 0x01	; 1
 6dc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 6e0:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
 6e4:	84 60       	ori	r24, 0x04	; 4
 6e6:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 6ea:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
 6ee:	81 60       	ori	r24, 0x01	; 1
 6f0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 6f4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 6f8:	84 60       	ori	r24, 0x04	; 4
 6fa:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
		sbi(ADCSRA, ADPS1);
 6fe:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 702:	82 60       	ori	r24, 0x02	; 2
 704:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
		sbi(ADCSRA, ADPS0);
 708:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 70c:	81 60       	ori	r24, 0x01	; 1
 70e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 712:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 716:	80 68       	ori	r24, 0x80	; 128
 718:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 71c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
 720:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <_ZN7TwoWire13rxBufferIndexE>
  rxBufferLength = 0;
 724:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <_ZN7TwoWire14rxBufferLengthE>

  txBufferIndex = 0;
  txBufferLength = 0;

  twi_init();
 728:	0e 94 9f 00 	call	0x13e	; 0x13e <twi_init>
  return 0;
}

void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) ) {twi_onSlaveReceive = function;}

void twi_attachSlaveTxEvent( void (*function)(void) ) {twi_onSlaveTransmit = function;}
 72c:	88 e7       	ldi	r24, 0x78	; 120
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <twi_onSlaveTransmit+0x1>
 734:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <twi_onSlaveTransmit>
  twi_txBufferLength += length;
  
  return 0;
}

void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) ) {twi_onSlaveReceive = function;}
 738:	89 e7       	ldi	r24, 0x79	; 121
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <twi_onSlaveReceive+0x1>
 740:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <twi_onSlaveReceive>
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
 744:	77 24       	eor	r7, r7
 746:	73 94       	inc	r7
  // set address of targeted slave
  txAddress = address;
 748:	98 e0       	ldi	r25, 0x08	; 8
 74a:	69 2e       	mov	r6, r25
go2:
    
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  } else {
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
 74c:	25 ee       	ldi	r18, 0xE5	; 229
 74e:	52 2e       	mov	r5, r18
    if (!(--counter_3)) goto check2;
    twi_handleTimeout(twi_do_reset_on_timeout); // с этим подумать, возможно выставить флаг здесь.
    return 5; //timeout
go2:
    
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
 750:	35 ec       	ldi	r19, 0xC5	; 197
 752:	43 2e       	mov	r4, r19
	
	setup();
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 754:	00 e0       	ldi	r16, 0x00	; 0
 756:	10 e0       	ldi	r17, 0x00	; 0
  if (!(--counter_2)) goto check1;
  if (!(--counter_3)) goto check1;
  twi_handleTimeout(twi_do_reset_on_timeout); // с этим подумать, возможно выставить флаг здесь.
  return 5; //timeout
go1:  
  twi_state = TWI_MTX;
 758:	42 e0       	ldi	r20, 0x02	; 2
 75a:	34 2e       	mov	r3, r20
  twi_sendStop = sendStop;
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
 75c:	22 24       	eor	r2, r2
 75e:	2a 94       	dec	r2
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
 760:	70 92 b8 01 	sts	0x01B8, r7	; 0x8001b8 <_ZN7TwoWire12transmittingE>
  // set address of targeted slave
  txAddress = address;
 764:	60 92 da 01 	sts	0x01DA, r6	; 0x8001da <_ZN7TwoWire9txAddressE>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 768:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
 76c:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <_ZN7TwoWire14txBufferLengthE>
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 770:	45 e0       	ldi	r20, 0x05	; 5
 772:	50 e0       	ldi	r21, 0x00	; 0
 774:	65 e1       	ldi	r22, 0x15	; 21
 776:	71 e0       	ldi	r23, 0x01	; 1
 778:	8d ed       	ldi	r24, 0xDD	; 221
 77a:	91 e0       	ldi	r25, 0x01	; 1
 77c:	0e 94 55 01 	call	0x2aa	; 0x2aa <_ZN7TwoWire5writeEPKhj>
byte x = 0;

void loop() {
  Wire.beginTransmission(8); // transmit to device #8
  Wire.write("x is ");        // sends five bytes
  Wire.write(x);              // sends one byte
 780:	60 91 dc 01 	lds	r22, 0x01DC	; 0x8001dc <x>
 784:	8d ed       	ldi	r24, 0xDD	; 221
 786:	91 e0       	ldi	r25, 0x01	; 1
 788:	0e 94 82 01 	call	0x304	; 0x304 <_ZN7TwoWire5writeEh>
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
  // transmit buffer (blocking)
  uint8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
 78c:	40 91 db 01 	lds	r20, 0x01DB	; 0x8001db <_ZN7TwoWire14txBufferLengthE>
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, bool wait, bool sendStop){
  volatile uint8_t counter_1;
  volatile uint8_t counter_2;
  volatile uint8_t counter_3;
  // ensure data will it into buffer
  if(TWI_BUFFER_LENGTH < length) return 1;
 790:	41 32       	cpi	r20, 0x21	; 33
 792:	58 f5       	brcc	.+86     	; 0x7ea <main+0x15c>
 794:	f0 90 da 01 	lds	r15, 0x01DA	; 0x8001da <_ZN7TwoWire9txAddressE>

  // wait until twi is ready, become master transmitter
  if (!twi_timeout_off_flag){
 798:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <twi_timeout_off_flag>
 79c:	81 11       	cpse	r24, r1
 79e:	09 c0       	rjmp	.+18     	; 0x7b2 <main+0x124>
    counter_1 = set_1;
 7a0:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <set_1>
 7a4:	8b 83       	std	Y+3, r24	; 0x03
    counter_2 = set_2;
 7a6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <set_2>
 7aa:	8a 83       	std	Y+2, r24	; 0x02
    counter_3 = set_3;
 7ac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 7b0:	89 83       	std	Y+1, r24	; 0x01
  }
check1:                                        // написать это без goto пока не хватает ума. :)
  if (TWI_READY == twi_state) goto go1;
 7b2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <twi_state>
 7b6:	88 23       	and	r24, r24
 7b8:	09 f4       	brne	.+2      	; 0x7bc <main+0x12e>
 7ba:	4e c0       	rjmp	.+156    	; 0x858 <main+0x1ca>
  if (twi_timeout_off_flag) goto check1;
 7bc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <twi_timeout_off_flag>
 7c0:	81 11       	cpse	r24, r1
 7c2:	f7 cf       	rjmp	.-18     	; 0x7b2 <main+0x124>
  if (!(--counter_1)) goto check1;
 7c4:	8b 81       	ldd	r24, Y+3	; 0x03
 7c6:	81 50       	subi	r24, 0x01	; 1
 7c8:	8b 83       	std	Y+3, r24	; 0x03
 7ca:	88 23       	and	r24, r24
 7cc:	91 f3       	breq	.-28     	; 0x7b2 <main+0x124>
  if (!(--counter_2)) goto check1;
 7ce:	8a 81       	ldd	r24, Y+2	; 0x02
 7d0:	81 50       	subi	r24, 0x01	; 1
 7d2:	8a 83       	std	Y+2, r24	; 0x02
 7d4:	88 23       	and	r24, r24
 7d6:	69 f3       	breq	.-38     	; 0x7b2 <main+0x124>
  if (!(--counter_3)) goto check1;
 7d8:	89 81       	ldd	r24, Y+1	; 0x01
 7da:	81 50       	subi	r24, 0x01	; 1
 7dc:	89 83       	std	Y+1, r24	; 0x01
 7de:	88 23       	and	r24, r24
 7e0:	41 f3       	breq	.-48     	; 0x7b2 <main+0x124>
  if (!(wait && (TWI_MTX == twi_state))) goto go3;
  if (twi_timeout_off_flag) goto check3;
  if (!(--counter_1)) goto check3;
  if (!(--counter_2)) goto check3;
  if (!(--counter_3)) goto check3;
  twi_handleTimeout(twi_do_reset_on_timeout);  // с этим подумать, возможно выставить флаг здесь.
 7e2:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <twi_do_reset_on_timeout>
 7e6:	0e 94 1a 03 	call	0x634	; 0x634 <twi_handleTimeout>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 7ea:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
 7ee:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <_ZN7TwoWire14txBufferLengthE>
  // indicate that we are done transmitting
  transmitting = 0;
 7f2:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <_ZN7TwoWire12transmittingE>
  Wire.endTransmission();    // stop transmitting

  x++;
 7f6:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <x>
 7fa:	8f 5f       	subi	r24, 0xFF	; 255
 7fc:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <x>
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint32_t start = micros();
 800:	0e 94 7a 00 	call	0xf4	; 0xf4 <micros>
 804:	4b 01       	movw	r8, r22
 806:	5c 01       	movw	r10, r24
 808:	84 ef       	ldi	r24, 0xF4	; 244
 80a:	c8 2e       	mov	r12, r24
 80c:	dd 24       	eor	r13, r13
 80e:	d3 94       	inc	r13
 810:	e1 2c       	mov	r14, r1
 812:	f1 2c       	mov	r15, r1

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
 814:	0e 94 7a 00 	call	0xf4	; 0xf4 <micros>
 818:	68 19       	sub	r22, r8
 81a:	79 09       	sbc	r23, r9
 81c:	8a 09       	sbc	r24, r10
 81e:	9b 09       	sbc	r25, r11
 820:	68 3e       	cpi	r22, 0xE8	; 232
 822:	73 40       	sbci	r23, 0x03	; 3
 824:	81 05       	cpc	r24, r1
 826:	91 05       	cpc	r25, r1
 828:	a8 f3       	brcs	.-22     	; 0x814 <main+0x186>
			ms--;
 82a:	21 e0       	ldi	r18, 0x01	; 1
 82c:	c2 1a       	sub	r12, r18
 82e:	d1 08       	sbc	r13, r1
 830:	e1 08       	sbc	r14, r1
 832:	f1 08       	sbc	r15, r1
			start += 1000;
 834:	88 ee       	ldi	r24, 0xE8	; 232
 836:	88 0e       	add	r8, r24
 838:	83 e0       	ldi	r24, 0x03	; 3
 83a:	98 1e       	adc	r9, r24
 83c:	a1 1c       	adc	r10, r1
 83e:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
 840:	c1 14       	cp	r12, r1
 842:	d1 04       	cpc	r13, r1
 844:	e1 04       	cpc	r14, r1
 846:	f1 04       	cpc	r15, r1
 848:	29 f7       	brne	.-54     	; 0x814 <main+0x186>
 84a:	01 15       	cp	r16, r1
 84c:	11 05       	cpc	r17, r1
 84e:	09 f4       	brne	.+2      	; 0x852 <main+0x1c4>
 850:	87 cf       	rjmp	.-242    	; 0x760 <main+0xd2>
 852:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 856:	84 cf       	rjmp	.-248    	; 0x760 <main+0xd2>
  if (!(--counter_2)) goto check1;
  if (!(--counter_3)) goto check1;
  twi_handleTimeout(twi_do_reset_on_timeout); // с этим подумать, возможно выставить флаг здесь.
  return 5; //timeout
go1:  
  twi_state = TWI_MTX;
 858:	30 92 b6 01 	sts	0x01B6, r3	; 0x8001b6 <twi_state>
  twi_sendStop = sendStop;
 85c:	70 92 b4 01 	sts	0x01B4, r7	; 0x8001b4 <twi_sendStop>
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
 860:	20 92 b3 01 	sts	0x01B3, r2	; 0x8001b3 <twi_error>

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
 864:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <twi_masterBufferIndex>
  twi_masterBufferLength = length;
 868:	40 93 b1 01 	sts	0x01B1, r20	; 0x8001b1 <twi_masterBufferLength>
  // copy data to twi buffer
  memcpy(&twi_masterBuffer, data, length); 
 86c:	50 e0       	ldi	r21, 0x00	; 0
 86e:	6a eb       	ldi	r22, 0xBA	; 186
 870:	71 e0       	ldi	r23, 0x01	; 1
 872:	81 e9       	ldi	r24, 0x91	; 145
 874:	91 e0       	ldi	r25, 0x01	; 1
 876:	0e 94 be 04 	call	0x97c	; 0x97c <memcpy>
   
  // build sla+w, slave device address + w bit (TW_WRITE = 0)
  twi_slarw = address << 1;
 87a:	ff 0c       	add	r15, r15
 87c:	f0 92 90 01 	sts	0x0190, r15	; 0x800190 <twi_slarw>
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (twi_inRepStart) {
 880:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <twi_inRepStart>
 884:	88 23       	and	r24, r24
 886:	09 f4       	brne	.+2      	; 0x88a <main+0x1fc>
 888:	52 c0       	rjmp	.+164    	; 0x92e <__stack+0x2f>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;      // remember, we're dealing with an ASYNC ISR
 88a:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <twi_inRepStart>
    TWDR = twi_slarw;
 88e:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <twi_slarw>
 892:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    
    if (!twi_timeout_off_flag){
 896:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <twi_timeout_off_flag>
 89a:	81 11       	cpse	r24, r1
 89c:	09 c0       	rjmp	.+18     	; 0x8b0 <main+0x222>
      counter_1 = set_1;
 89e:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <set_1>
 8a2:	8b 83       	std	Y+3, r24	; 0x03
      counter_2 = set_2;
 8a4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <set_2>
 8a8:	8a 83       	std	Y+2, r24	; 0x02
      counter_3 = set_3;
 8aa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 8ae:	89 83       	std	Y+1, r24	; 0x01
    }
check2:                                        // написать это без goto пока не хватает ума. :)
    if (!(TWCR & _BV(TWWC))) goto go2;
 8b0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 8b4:	83 ff       	sbrs	r24, 3
 8b6:	14 c0       	rjmp	.+40     	; 0x8e0 <main+0x252>
    if (twi_timeout_off_flag) goto check2;
 8b8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <twi_timeout_off_flag>
 8bc:	81 11       	cpse	r24, r1
 8be:	f8 cf       	rjmp	.-16     	; 0x8b0 <main+0x222>
    if (!(--counter_1)) goto check2;
 8c0:	8b 81       	ldd	r24, Y+3	; 0x03
 8c2:	81 50       	subi	r24, 0x01	; 1
 8c4:	8b 83       	std	Y+3, r24	; 0x03
 8c6:	88 23       	and	r24, r24
 8c8:	99 f3       	breq	.-26     	; 0x8b0 <main+0x222>
    if (!(--counter_2)) goto check2;
 8ca:	8a 81       	ldd	r24, Y+2	; 0x02
 8cc:	81 50       	subi	r24, 0x01	; 1
 8ce:	8a 83       	std	Y+2, r24	; 0x02
 8d0:	88 23       	and	r24, r24
 8d2:	71 f3       	breq	.-36     	; 0x8b0 <main+0x222>
    if (!(--counter_3)) goto check2;
 8d4:	89 81       	ldd	r24, Y+1	; 0x01
 8d6:	81 50       	subi	r24, 0x01	; 1
 8d8:	89 83       	std	Y+1, r24	; 0x01
 8da:	88 23       	and	r24, r24
 8dc:	49 f3       	breq	.-46     	; 0x8b0 <main+0x222>
 8de:	81 cf       	rjmp	.-254    	; 0x7e2 <main+0x154>
    twi_handleTimeout(twi_do_reset_on_timeout); // с этим подумать, возможно выставить флаг здесь.
    return 5; //timeout
go2:
    
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
 8e0:	40 92 bc 00 	sts	0x00BC, r4	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
  }

  // wait for write operation to complete
  if (!twi_timeout_off_flag){
 8e4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <twi_timeout_off_flag>
 8e8:	81 11       	cpse	r24, r1
 8ea:	09 c0       	rjmp	.+18     	; 0x8fe <main+0x270>
    counter_1 = set_1;
 8ec:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <set_1>
 8f0:	8b 83       	std	Y+3, r24	; 0x03
    counter_2 = set_2;
 8f2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <set_2>
 8f6:	8a 83       	std	Y+2, r24	; 0x02
    counter_3 = set_3;
 8f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 8fc:	89 83       	std	Y+1, r24	; 0x01
  }
check3:                                        // написать это без goto пока не хватает ума. :)
  if (!(wait && (TWI_MTX == twi_state))) goto go3;
 8fe:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <twi_state>
 902:	82 30       	cpi	r24, 0x02	; 2
 904:	b9 f4       	brne	.+46     	; 0x934 <__stack+0x35>
  if (twi_timeout_off_flag) goto check3;
 906:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <twi_timeout_off_flag>
 90a:	81 11       	cpse	r24, r1
 90c:	f8 cf       	rjmp	.-16     	; 0x8fe <main+0x270>
  if (!(--counter_1)) goto check3;
 90e:	8b 81       	ldd	r24, Y+3	; 0x03
 910:	81 50       	subi	r24, 0x01	; 1
 912:	8b 83       	std	Y+3, r24	; 0x03
 914:	88 23       	and	r24, r24
 916:	99 f3       	breq	.-26     	; 0x8fe <main+0x270>
  if (!(--counter_2)) goto check3;
 918:	8a 81       	ldd	r24, Y+2	; 0x02
 91a:	81 50       	subi	r24, 0x01	; 1
 91c:	8a 83       	std	Y+2, r24	; 0x02
 91e:	88 23       	and	r24, r24
 920:	71 f3       	breq	.-36     	; 0x8fe <main+0x270>
  if (!(--counter_3)) goto check3;
 922:	89 81       	ldd	r24, Y+1	; 0x01
 924:	81 50       	subi	r24, 0x01	; 1
 926:	89 83       	std	Y+1, r24	; 0x01
 928:	88 23       	and	r24, r24
 92a:	49 f3       	breq	.-46     	; 0x8fe <main+0x270>
 92c:	5a cf       	rjmp	.-332    	; 0x7e2 <main+0x154>
go2:
    
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  } else {
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
 92e:	50 92 bc 00 	sts	0x00BC, r5	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 932:	d8 cf       	rjmp	.-80     	; 0x8e4 <main+0x256>
  if (!(--counter_2)) goto check3;
  if (!(--counter_3)) goto check3;
  twi_handleTimeout(twi_do_reset_on_timeout);  // с этим подумать, возможно выставить флаг здесь.
  return 5; //timeout
go3:
  if (twi_error == 0xFF)
 934:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <twi_error>
 938:	8f 3f       	cpi	r24, 0xFF	; 255
 93a:	09 f4       	brne	.+2      	; 0x93e <__stack+0x3f>
 93c:	56 cf       	rjmp	.-340    	; 0x7ea <main+0x15c>
    return 0; // success
  else if (twi_error == TW_MT_SLA_NACK)
 93e:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <twi_error>
 942:	80 32       	cpi	r24, 0x20	; 32
 944:	09 f4       	brne	.+2      	; 0x948 <__stack+0x49>
 946:	51 cf       	rjmp	.-350    	; 0x7ea <main+0x15c>
    return 2; // error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
 948:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <twi_error>
 94c:	4e cf       	rjmp	.-356    	; 0x7ea <main+0x15c>

0000094e <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 94e:	ed ed       	ldi	r30, 0xDD	; 221
 950:	f1 e0       	ldi	r31, 0x01	; 1
 952:	13 82       	std	Z+3, r1	; 0x03
 954:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
 956:	88 ee       	ldi	r24, 0xE8	; 232
 958:	93 e0       	ldi	r25, 0x03	; 3
 95a:	a0 e0       	ldi	r26, 0x00	; 0
 95c:	b0 e0       	ldi	r27, 0x00	; 0
 95e:	84 83       	std	Z+4, r24	; 0x04
 960:	95 83       	std	Z+5, r25	; 0x05
 962:	a6 83       	std	Z+6, r26	; 0x06
 964:	b7 83       	std	Z+7, r27	; 0x07
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
 966:	87 e0       	ldi	r24, 0x07	; 7
 968:	91 e0       	ldi	r25, 0x01	; 1
 96a:	91 83       	std	Z+1, r25	; 0x01
 96c:	80 83       	st	Z, r24
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
 96e:	08 95       	ret

00000970 <__tablejump2__>:
 970:	ee 0f       	add	r30, r30
 972:	ff 1f       	adc	r31, r31
 974:	05 90       	lpm	r0, Z+
 976:	f4 91       	lpm	r31, Z
 978:	e0 2d       	mov	r30, r0
 97a:	09 94       	ijmp

0000097c <memcpy>:
 97c:	fb 01       	movw	r30, r22
 97e:	dc 01       	movw	r26, r24
 980:	02 c0       	rjmp	.+4      	; 0x986 <memcpy+0xa>
 982:	01 90       	ld	r0, Z+
 984:	0d 92       	st	X+, r0
 986:	41 50       	subi	r20, 0x01	; 1
 988:	50 40       	sbci	r21, 0x00	; 0
 98a:	d8 f7       	brcc	.-10     	; 0x982 <memcpy+0x6>
 98c:	08 95       	ret

0000098e <_exit>:
 98e:	f8 94       	cli

00000990 <__stop_program>:
 990:	ff cf       	rjmp	.-2      	; 0x990 <__stop_program>
