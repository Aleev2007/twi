
master_writer.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__ctors_end>
   4:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
   8:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
   c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  10:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  14:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  18:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  1c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  20:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  24:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  28:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  2c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  30:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  34:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  38:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  3c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  40:	0c 94 e3 01 	jmp	0x3c6	; 0x3c6 <__vector_16>
  44:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  48:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  4c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  50:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  54:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  58:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  5c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  60:	0c 94 2d 02 	jmp	0x45a	; 0x45a <__vector_24>
  64:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	01 02       	muls	r16, r17
  6a:	04 08       	sbc	r0, r4
  6c:	10 20       	and	r1, r0
  6e:	40 80       	ld	r4, Z
  70:	01 02       	muls	r16, r17
  72:	04 08       	sbc	r0, r4
  74:	10 20       	and	r1, r0
  76:	01 02       	muls	r16, r17
  78:	04 08       	sbc	r0, r4
  7a:	10 20       	and	r1, r0

0000007c <port_to_output_PGM>:
  7c:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000086 <digital_pin_to_port_PGM>:
  86:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  96:	03 03 03 03                                         ....

0000009a <__ctors_start>:
  9a:	b5 04       	cpc	r11, r5

0000009c <__ctors_end>:
  9c:	11 24       	eor	r1, r1
  9e:	1f be       	out	0x3f, r1	; 63
  a0:	cf ef       	ldi	r28, 0xFF	; 255
  a2:	d8 e0       	ldi	r29, 0x08	; 8
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	cd bf       	out	0x3d, r28	; 61

000000a8 <__do_copy_data>:
  a8:	11 e0       	ldi	r17, 0x01	; 1
  aa:	a0 e0       	ldi	r26, 0x00	; 0
  ac:	b1 e0       	ldi	r27, 0x01	; 1
  ae:	ee ea       	ldi	r30, 0xAE	; 174
  b0:	f9 e0       	ldi	r31, 0x09	; 9
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x10>
  b4:	05 90       	lpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	ac 31       	cpi	r26, 0x1C	; 28
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0xc>

000000be <__do_clear_bss>:
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	ac e1       	ldi	r26, 0x1C	; 28
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	a9 3e       	cpi	r26, 0xE9	; 233
  ca:	b2 07       	cpc	r27, r18
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>

000000ce <__do_global_ctors>:
  ce:	10 e0       	ldi	r17, 0x00	; 0
  d0:	ce e4       	ldi	r28, 0x4E	; 78
  d2:	d0 e0       	ldi	r29, 0x00	; 0
  d4:	04 c0       	rjmp	.+8      	; 0xde <__do_global_ctors+0x10>
  d6:	21 97       	sbiw	r28, 0x01	; 1
  d8:	fe 01       	movw	r30, r28
  da:	0e 94 c6 04 	call	0x98c	; 0x98c <__tablejump2__>
  de:	cd 34       	cpi	r28, 0x4D	; 77
  e0:	d1 07       	cpc	r29, r17
  e2:	c9 f7       	brne	.-14     	; 0xd6 <__do_global_ctors+0x8>
  e4:	0e 94 4c 03 	call	0x698	; 0x698 <main>
  e8:	0c 94 d5 04 	jmp	0x9aa	; 0x9aa <_exit>

000000ec <__bad_interrupt>:
  ec:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f0 <_ZN7TwoWire16onRequestServiceEv>:
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
  txBufferLength = 0;
  // alert user program
  user_onRequest();
}
  f0:	08 95       	ret

000000f2 <_ZN7TwoWire16onReceiveServiceEPhi>:
  // set rx iterator vars
  rxBufferIndex = 0;
  rxBufferLength = numBytes;
  // alert user program
  user_onReceive(numBytes);
}
  f2:	08 95       	ret

000000f4 <micros>:
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
  f4:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
  f6:	f8 94       	cli
	m = timer0_overflow_count;
  f8:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <timer0_overflow_count>
  fc:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <timer0_overflow_count+0x1>
 100:	a0 91 87 01 	lds	r26, 0x0187	; 0x800187 <timer0_overflow_count+0x2>
 104:	b0 91 88 01 	lds	r27, 0x0188	; 0x800188 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
 108:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 10a:	a8 9b       	sbis	0x15, 0	; 21
 10c:	05 c0       	rjmp	.+10     	; 0x118 <micros+0x24>
 10e:	2f 3f       	cpi	r18, 0xFF	; 255
 110:	19 f0       	breq	.+6      	; 0x118 <micros+0x24>
		m++;
 112:	01 96       	adiw	r24, 0x01	; 1
 114:	a1 1d       	adc	r26, r1
 116:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 118:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
 11a:	ba 2f       	mov	r27, r26
 11c:	a9 2f       	mov	r26, r25
 11e:	98 2f       	mov	r25, r24
 120:	88 27       	eor	r24, r24
 122:	bc 01       	movw	r22, r24
 124:	cd 01       	movw	r24, r26
 126:	62 0f       	add	r22, r18
 128:	71 1d       	adc	r23, r1
 12a:	81 1d       	adc	r24, r1
 12c:	91 1d       	adc	r25, r1
 12e:	42 e0       	ldi	r20, 0x02	; 2
 130:	66 0f       	add	r22, r22
 132:	77 1f       	adc	r23, r23
 134:	88 1f       	adc	r24, r24
 136:	99 1f       	adc	r25, r25
 138:	4a 95       	dec	r20
 13a:	d1 f7       	brne	.-12     	; 0x130 <micros+0x3c>
}
 13c:	08 95       	ret

0000013e <twi_init>:

//*************************************************************************************

void twi_init(void){
  // initialize state
  twi_state = TWI_READY;
 13e:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <twi_state>
  twi_sendStop = true;    // default value
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	90 93 b4 01 	sts	0x01B4, r25	; 0x8001b4 <twi_sendStop>
  twi_inRepStart = false;
 148:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <twi_inRepStart>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 14c:	f8 94       	cli
  volatile uint8_t *out;
  // activate internal pullups for twi.
  ATOMIC_BLOCK (ATOMIC_FORCEON){
    out = portOutputRegister (digitalPinToPort (SDA)); 
 14e:	e8 e9       	ldi	r30, 0x98	; 152
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	e4 91       	lpm	r30, Z
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	ee 0f       	add	r30, r30
 158:	ff 1f       	adc	r31, r31
 15a:	e4 58       	subi	r30, 0x84	; 132
 15c:	ff 4f       	sbci	r31, 0xFF	; 255
 15e:	a5 91       	lpm	r26, Z+
 160:	b4 91       	lpm	r27, Z
    *out |= (digitalPinToBitMask (SDA) | digitalPinToBitMask (SCL));
 162:	ea e7       	ldi	r30, 0x7A	; 122
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	84 91       	lpm	r24, Z
 168:	eb e7       	ldi	r30, 0x7B	; 123
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	e4 91       	lpm	r30, Z
 16e:	2c 91       	ld	r18, X
 170:	e8 2b       	or	r30, r24
 172:	e2 2b       	or	r30, r18
 174:	ec 93       	st	X, r30
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 176:	78 94       	sei
  }
  // initialize twi prescaler and bit rate
  TWSR = 1;  // TWI Bit Rate Prescaler = 4
 178:	90 93 b9 00 	sts	0x00B9, r25	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     TWI Bit Rate for 16MHz MCU
     400 kHz - TWBR = 3
     100 kHz - TWBR = 18
      10 kHz - TWBR = 198
  */
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
 17c:	88 e4       	ldi	r24, 0x48	; 72
 17e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
  // enable twi module, acknowledge bit, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
 182:	85 e4       	ldi	r24, 0x45	; 69
 184:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
}
 188:	08 95       	ret

0000018a <twi_handleTimeout>:
    set_2 = (timeout & 0x00FF00UL) >> 8;
    set_3 = (timeout & 0xFF0000UL) >> 16;
  }
}

void twi_handleTimeout(bool reset){ 
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
  twi_timed_out_flag = true; 
 18e:	91 e0       	ldi	r25, 0x01	; 1
 190:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <twi_timed_out_flag>

  if (reset) {
 194:	88 23       	and	r24, r24
 196:	19 f1       	breq	.+70     	; 0x1de <twi_handleTimeout+0x54>
    // remember bitrate and address settings
    uint8_t previous_TWBR = TWBR;
 198:	c0 91 b8 00 	lds	r28, 0x00B8	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    uint8_t previous_TWAR = TWAR;
 19c:	d0 91 ba 00 	lds	r29, 0x00BA	; 0x8000ba <__DATA_REGION_ORIGIN__+0x5a>
}

void twi_disable(void){
  volatile uint8_t *out;
  // disable twi module
  TWCR = 0;
 1a0:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 1a4:	f8 94       	cli
  // deactivate internal pullups for twi.
  ATOMIC_BLOCK (ATOMIC_FORCEON){
    out = portOutputRegister (digitalPinToPort (SDA)); 
 1a6:	e8 e9       	ldi	r30, 0x98	; 152
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	e4 91       	lpm	r30, Z
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	ee 0f       	add	r30, r30
 1b0:	ff 1f       	adc	r31, r31
 1b2:	e4 58       	subi	r30, 0x84	; 132
 1b4:	ff 4f       	sbci	r31, 0xFF	; 255
 1b6:	a5 91       	lpm	r26, Z+
 1b8:	b4 91       	lpm	r27, Z
    *out &= (~ digitalPinToBitMask (SDA) & ~ digitalPinToBitMask (SCL));
 1ba:	ea e7       	ldi	r30, 0x7A	; 122
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	84 91       	lpm	r24, Z
 1c0:	eb e7       	ldi	r30, 0x7B	; 123
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	e4 91       	lpm	r30, Z
 1c6:	9c 91       	ld	r25, X
 1c8:	e8 2b       	or	r30, r24
 1ca:	e0 95       	com	r30
 1cc:	e9 23       	and	r30, r25
 1ce:	ec 93       	st	X, r30
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 1d0:	78 94       	sei
    uint8_t previous_TWBR = TWBR;
    uint8_t previous_TWAR = TWAR;

    // reset the interface
    twi_disable();
    twi_init();
 1d2:	0e 94 9f 00 	call	0x13e	; 0x13e <twi_init>

    // reapply the previous register values
    TWAR = previous_TWAR;
 1d6:	d0 93 ba 00 	sts	0x00BA, r29	; 0x8000ba <__DATA_REGION_ORIGIN__+0x5a>
    TWBR = previous_TWBR;
 1da:	c0 93 b8 00 	sts	0x00B8, r28	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
  }
}
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	08 95       	ret

000001e4 <twi_stop>:
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
  }
}

void twi_stop(void){
 1e4:	cf 93       	push	r28
 1e6:	df 93       	push	r29
 1e8:	00 d0       	rcall	.+0      	; 0x1ea <twi_stop+0x6>
 1ea:	1f 92       	push	r1
 1ec:	cd b7       	in	r28, 0x3d	; 61
 1ee:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t counter_1;
  volatile uint8_t counter_2;
  volatile uint8_t counter_3;
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWSTO);
 1f0:	85 e9       	ldi	r24, 0x95	; 149
 1f2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  if (!twi_timeout_off_flag){
 1f6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <twi_timeout_off_flag>
 1fa:	81 11       	cpse	r24, r1
 1fc:	09 c0       	rjmp	.+18     	; 0x210 <twi_stop+0x2c>
    counter_1 = set_1;
 1fe:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <set_1>
 202:	89 83       	std	Y+1, r24	; 0x01
    counter_2 = set_2;
 204:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <set_2>
 208:	8a 83       	std	Y+2, r24	; 0x02
    counter_3 = set_3;
 20a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 20e:	8b 83       	std	Y+3, r24	; 0x03
  }  
check:                                        
  if (!(TWCR & _BV(TWSTO))) goto go;
 210:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 214:	84 ff       	sbrs	r24, 4
 216:	21 c0       	rjmp	.+66     	; 0x25a <twi_stop+0x76>
  if (twi_timeout_off_flag) goto check;
 218:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <twi_timeout_off_flag>
 21c:	81 11       	cpse	r24, r1
 21e:	f8 cf       	rjmp	.-16     	; 0x210 <twi_stop+0x2c>
  if (!(counter_1--)) goto check;
 220:	89 81       	ldd	r24, Y+1	; 0x01
 222:	9f ef       	ldi	r25, 0xFF	; 255
 224:	98 0f       	add	r25, r24
 226:	99 83       	std	Y+1, r25	; 0x01
 228:	88 23       	and	r24, r24
 22a:	91 f3       	breq	.-28     	; 0x210 <twi_stop+0x2c>
  if (!(counter_2--)) {_NOP(); goto check;}
 22c:	8a 81       	ldd	r24, Y+2	; 0x02
 22e:	9f ef       	ldi	r25, 0xFF	; 255
 230:	98 0f       	add	r25, r24
 232:	9a 83       	std	Y+2, r25	; 0x02
 234:	81 11       	cpse	r24, r1
 236:	02 c0       	rjmp	.+4      	; 0x23c <twi_stop+0x58>
  if (!(counter_3--)) {_NOP(); goto check;}
 238:	00 00       	nop
 23a:	ea cf       	rjmp	.-44     	; 0x210 <twi_stop+0x2c>
 23c:	8b 81       	ldd	r24, Y+3	; 0x03
 23e:	9f ef       	ldi	r25, 0xFF	; 255
 240:	98 0f       	add	r25, r24
 242:	9b 83       	std	Y+3, r25	; 0x03
 244:	88 23       	and	r24, r24
 246:	c1 f3       	breq	.-16     	; 0x238 <twi_stop+0x54>
  twi_handleTimeout(twi_do_reset_on_timeout); 
 248:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <twi_do_reset_on_timeout>
  return; //timeout
go:
  // update twi state
  twi_state = TWI_READY;
}
 24c:	0f 90       	pop	r0
 24e:	0f 90       	pop	r0
 250:	0f 90       	pop	r0
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
  if (!(TWCR & _BV(TWSTO))) goto go;
  if (twi_timeout_off_flag) goto check;
  if (!(counter_1--)) goto check;
  if (!(counter_2--)) {_NOP(); goto check;}
  if (!(counter_3--)) {_NOP(); goto check;}
  twi_handleTimeout(twi_do_reset_on_timeout); 
 256:	0c 94 c5 00 	jmp	0x18a	; 0x18a <twi_handleTimeout>
  return; //timeout
go:
  // update twi state
  twi_state = TWI_READY;
 25a:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <twi_state>
}
 25e:	0f 90       	pop	r0
 260:	0f 90       	pop	r0
 262:	0f 90       	pop	r0
 264:	df 91       	pop	r29
 266:	cf 91       	pop	r28
 268:	08 95       	ret

0000026a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
 26a:	08 95       	ret

0000026c <_ZN7TwoWire4peekEv>:
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
  
  if(rxBufferIndex < rxBufferLength){
 26c:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <_ZN7TwoWire13rxBufferIndexE>
 270:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <_ZN7TwoWire14rxBufferLengthE>
 274:	e8 17       	cp	r30, r24
 276:	30 f4       	brcc	.+12     	; 0x284 <_ZN7TwoWire4peekEv+0x18>
    value = rxBuffer[rxBufferIndex];
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	e4 5e       	subi	r30, 0xE4	; 228
 27c:	fe 4f       	sbci	r31, 0xFE	; 254
 27e:	80 81       	ld	r24, Z
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	08 95       	ret
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
 284:	8f ef       	ldi	r24, 0xFF	; 255
 286:	9f ef       	ldi	r25, 0xFF	; 255
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
 288:	08 95       	ret

0000028a <_ZN7TwoWire4readEv>:
int TwoWire::read(void)
{
  int value = -1;
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
 28a:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <_ZN7TwoWire13rxBufferIndexE>
 28e:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <_ZN7TwoWire14rxBufferLengthE>
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
 292:	2f ef       	ldi	r18, 0xFF	; 255
 294:	3f ef       	ldi	r19, 0xFF	; 255
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
 296:	98 17       	cp	r25, r24
 298:	48 f4       	brcc	.+18     	; 0x2ac <_ZN7TwoWire4readEv+0x22>
    value = rxBuffer[rxBufferIndex];
 29a:	e9 2f       	mov	r30, r25
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	e4 5e       	subi	r30, 0xE4	; 228
 2a0:	fe 4f       	sbci	r31, 0xFE	; 254
 2a2:	20 81       	ld	r18, Z
 2a4:	30 e0       	ldi	r19, 0x00	; 0
    ++rxBufferIndex;
 2a6:	9f 5f       	subi	r25, 0xFF	; 255
 2a8:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <_ZN7TwoWire13rxBufferIndexE>
  }

  return value;
}
 2ac:	c9 01       	movw	r24, r18
 2ae:	08 95       	ret

000002b0 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
 2b0:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <_ZN7TwoWire14rxBufferLengthE>
 2b4:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <_ZN7TwoWire13rxBufferIndexE>
}
 2b8:	89 1b       	sub	r24, r25
 2ba:	99 0b       	sbc	r25, r25
 2bc:	08 95       	ret

000002be <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	08 95       	ret

000002c4 <twi_transmit>:
  /* twi bit rate formula from atmega128 manual pg 204
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR * Prescaler))*/
  
}

uint8_t twi_transmit(const uint8_t* data, uint8_t length){
 2c4:	cf 93       	push	r28
  uint8_t *p = &twi_txBuffer;
  
  // !!! нужно избавиться от 3х буферов
  
  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < (twi_txBufferLength+length)) return 1;
 2c6:	20 91 5d 01 	lds	r18, 0x015D	; 0x80015d <twi_txBufferLength>
 2ca:	46 2f       	mov	r20, r22
 2cc:	50 e0       	ldi	r21, 0x00	; 0
 2ce:	24 0f       	add	r18, r20
 2d0:	35 2f       	mov	r19, r21
 2d2:	31 1d       	adc	r19, r1
 2d4:	21 32       	cpi	r18, 0x21	; 33
 2d6:	31 05       	cpc	r19, r1
 2d8:	b4 f4       	brge	.+44     	; 0x306 <twi_transmit+0x42>
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state) return 2;
 2da:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <twi_state>
 2de:	24 30       	cpi	r18, 0x04	; 4
 2e0:	a1 f4       	brne	.+40     	; 0x30a <twi_transmit+0x46>
 2e2:	c6 2f       	mov	r28, r22
 2e4:	bc 01       	movw	r22, r24
  
  // set length and copy data into tx buffer
  memcpy(p + twi_txBufferLength, data, length);
 2e6:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <twi_txBufferLength>
 2ea:	89 2f       	mov	r24, r25
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	83 5c       	subi	r24, 0xC3	; 195
 2f0:	9e 4f       	sbci	r25, 0xFE	; 254
 2f2:	0e 94 cc 04 	call	0x998	; 0x998 <memcpy>
  twi_txBufferLength += length;
 2f6:	60 91 5d 01 	lds	r22, 0x015D	; 0x80015d <twi_txBufferLength>
 2fa:	6c 0f       	add	r22, r28
 2fc:	60 93 5d 01 	sts	0x015D, r22	; 0x80015d <twi_txBufferLength>
 300:	80 e0       	ldi	r24, 0x00	; 0
  
  return 0;
}
 302:	cf 91       	pop	r28
 304:	08 95       	ret
  uint8_t *p = &twi_txBuffer;
  
  // !!! нужно избавиться от 3х буферов
  
  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < (twi_txBufferLength+length)) return 1;
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	fc cf       	rjmp	.-8      	; 0x302 <twi_transmit+0x3e>
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state) return 2;
 30a:	82 e0       	ldi	r24, 0x02	; 2
 30c:	fa cf       	rjmp	.-12     	; 0x302 <twi_transmit+0x3e>

0000030e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 30e:	cf 92       	push	r12
 310:	df 92       	push	r13
 312:	ef 92       	push	r14
 314:	ff 92       	push	r15
 316:	0f 93       	push	r16
 318:	1f 93       	push	r17
 31a:	cf 93       	push	r28
 31c:	df 93       	push	r29
 31e:	7c 01       	movw	r14, r24
 320:	cb 01       	movw	r24, r22
 322:	8a 01       	movw	r16, r20
  if(transmitting){
 324:	20 91 b8 01 	lds	r18, 0x01B8	; 0x8001b8 <_ZN7TwoWire12transmittingE>
 328:	22 23       	and	r18, r18
 32a:	89 f0       	breq	.+34     	; 0x34e <_ZN7TwoWire5writeEPKhj+0x40>
 32c:	eb 01       	movw	r28, r22
 32e:	6b 01       	movw	r12, r22
 330:	c4 0e       	add	r12, r20
 332:	d5 1e       	adc	r13, r21
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
 334:	cc 15       	cp	r28, r12
 336:	dd 05       	cpc	r29, r13
 338:	69 f0       	breq	.+26     	; 0x354 <_ZN7TwoWire5writeEPKhj+0x46>
      write(data[i]);
 33a:	69 91       	ld	r22, Y+
 33c:	d7 01       	movw	r26, r14
 33e:	ed 91       	ld	r30, X+
 340:	fc 91       	ld	r31, X
 342:	01 90       	ld	r0, Z+
 344:	f0 81       	ld	r31, Z
 346:	e0 2d       	mov	r30, r0
 348:	c7 01       	movw	r24, r14
 34a:	09 95       	icall
 34c:	f3 cf       	rjmp	.-26     	; 0x334 <_ZN7TwoWire5writeEPKhj+0x26>
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
 34e:	64 2f       	mov	r22, r20
 350:	0e 94 62 01 	call	0x2c4	; 0x2c4 <twi_transmit>
  }
  return quantity;
}
 354:	c8 01       	movw	r24, r16
 356:	df 91       	pop	r29
 358:	cf 91       	pop	r28
 35a:	1f 91       	pop	r17
 35c:	0f 91       	pop	r16
 35e:	ff 90       	pop	r15
 360:	ef 90       	pop	r14
 362:	df 90       	pop	r13
 364:	cf 90       	pop	r12
 366:	08 95       	ret

00000368 <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
 368:	cf 93       	push	r28
 36a:	df 93       	push	r29
 36c:	1f 92       	push	r1
 36e:	cd b7       	in	r28, 0x3d	; 61
 370:	de b7       	in	r29, 0x3e	; 62
 372:	69 83       	std	Y+1, r22	; 0x01
  if(transmitting){
 374:	20 91 b8 01 	lds	r18, 0x01B8	; 0x8001b8 <_ZN7TwoWire12transmittingE>
 378:	22 23       	and	r18, r18
 37a:	f9 f0       	breq	.+62     	; 0x3ba <_ZN7TwoWire5writeEh+0x52>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
 37c:	20 91 db 01 	lds	r18, 0x01DB	; 0x8001db <_ZN7TwoWire14txBufferLengthE>
 380:	20 32       	cpi	r18, 0x20	; 32
 382:	58 f0       	brcs	.+22     	; 0x39a <_ZN7TwoWire5writeEh+0x32>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
 384:	21 e0       	ldi	r18, 0x01	; 1
 386:	30 e0       	ldi	r19, 0x00	; 0
 388:	fc 01       	movw	r30, r24
 38a:	33 83       	std	Z+3, r19	; 0x03
 38c:	22 83       	std	Z+2, r18	; 0x02
      setWriteError();
      return 0;
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	80 e0       	ldi	r24, 0x00	; 0
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
}
 392:	0f 90       	pop	r0
 394:	df 91       	pop	r29
 396:	cf 91       	pop	r28
 398:	08 95       	ret
    if(txBufferLength >= BUFFER_LENGTH){
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
 39a:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <_ZN7TwoWire13txBufferIndexE>
 39e:	e8 2f       	mov	r30, r24
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	e6 54       	subi	r30, 0x46	; 70
 3a4:	fe 4f       	sbci	r31, 0xFE	; 254
 3a6:	99 81       	ldd	r25, Y+1	; 0x01
 3a8:	90 83       	st	Z, r25
    ++txBufferIndex;
 3aa:	8f 5f       	subi	r24, 0xFF	; 255
 3ac:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <_ZN7TwoWire13txBufferIndexE>
    // update amount in buffer   
    txBufferLength = txBufferIndex;
 3b0:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <_ZN7TwoWire14txBufferLengthE>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	ec cf       	rjmp	.-40     	; 0x392 <_ZN7TwoWire5writeEh+0x2a>
    // update amount in buffer   
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
 3ba:	61 e0       	ldi	r22, 0x01	; 1
 3bc:	ce 01       	movw	r24, r28
 3be:	01 96       	adiw	r24, 0x01	; 1
 3c0:	0e 94 62 01 	call	0x2c4	; 0x2c4 <twi_transmit>
 3c4:	f7 cf       	rjmp	.-18     	; 0x3b4 <_ZN7TwoWire5writeEh+0x4c>

000003c6 <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
 3c6:	1f 92       	push	r1
 3c8:	0f 92       	push	r0
 3ca:	0f b6       	in	r0, 0x3f	; 63
 3cc:	0f 92       	push	r0
 3ce:	11 24       	eor	r1, r1
 3d0:	2f 93       	push	r18
 3d2:	3f 93       	push	r19
 3d4:	8f 93       	push	r24
 3d6:	9f 93       	push	r25
 3d8:	af 93       	push	r26
 3da:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 3dc:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <timer0_millis>
 3e0:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <timer0_millis+0x1>
 3e4:	a0 91 83 01 	lds	r26, 0x0183	; 0x800183 <timer0_millis+0x2>
 3e8:	b0 91 84 01 	lds	r27, 0x0184	; 0x800184 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
 3ec:	30 91 80 01 	lds	r19, 0x0180	; 0x800180 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
 3f0:	23 e0       	ldi	r18, 0x03	; 3
 3f2:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
 3f4:	2d 37       	cpi	r18, 0x7D	; 125
 3f6:	58 f5       	brcc	.+86     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
 3f8:	01 96       	adiw	r24, 0x01	; 1
 3fa:	a1 1d       	adc	r26, r1
 3fc:	b1 1d       	adc	r27, r1
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
		m += 1;
	}

	timer0_fract = f;
 3fe:	20 93 80 01 	sts	0x0180, r18	; 0x800180 <timer0_fract>
	timer0_millis = m;
 402:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <timer0_millis>
 406:	90 93 82 01 	sts	0x0182, r25	; 0x800182 <timer0_millis+0x1>
 40a:	a0 93 83 01 	sts	0x0183, r26	; 0x800183 <timer0_millis+0x2>
 40e:	b0 93 84 01 	sts	0x0184, r27	; 0x800184 <timer0_millis+0x3>
	timer0_overflow_count++;
 412:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <timer0_overflow_count>
 416:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <timer0_overflow_count+0x1>
 41a:	a0 91 87 01 	lds	r26, 0x0187	; 0x800187 <timer0_overflow_count+0x2>
 41e:	b0 91 88 01 	lds	r27, 0x0188	; 0x800188 <timer0_overflow_count+0x3>
 422:	01 96       	adiw	r24, 0x01	; 1
 424:	a1 1d       	adc	r26, r1
 426:	b1 1d       	adc	r27, r1
 428:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <timer0_overflow_count>
 42c:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <timer0_overflow_count+0x1>
 430:	a0 93 87 01 	sts	0x0187, r26	; 0x800187 <timer0_overflow_count+0x2>
 434:	b0 93 88 01 	sts	0x0188, r27	; 0x800188 <timer0_overflow_count+0x3>
}
 438:	bf 91       	pop	r27
 43a:	af 91       	pop	r26
 43c:	9f 91       	pop	r25
 43e:	8f 91       	pop	r24
 440:	3f 91       	pop	r19
 442:	2f 91       	pop	r18
 444:	0f 90       	pop	r0
 446:	0f be       	out	0x3f, r0	; 63
 448:	0f 90       	pop	r0
 44a:	1f 90       	pop	r1
 44c:	18 95       	reti
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
 44e:	26 e8       	ldi	r18, 0x86	; 134
 450:	23 0f       	add	r18, r19
		m += 1;
 452:	02 96       	adiw	r24, 0x02	; 2
 454:	a1 1d       	adc	r26, r1
 456:	b1 1d       	adc	r27, r1
 458:	d2 cf       	rjmp	.-92     	; 0x3fe <__vector_16+0x38>

0000045a <__vector_24>:
  // copy twi buffer to data
  memcpy(data, &twi_masterBuffer, length);
  return length;
}

ISR(TWI_vect){
 45a:	1f 92       	push	r1
 45c:	0f 92       	push	r0
 45e:	0f b6       	in	r0, 0x3f	; 63
 460:	0f 92       	push	r0
 462:	11 24       	eor	r1, r1
 464:	2f 93       	push	r18
 466:	3f 93       	push	r19
 468:	4f 93       	push	r20
 46a:	5f 93       	push	r21
 46c:	6f 93       	push	r22
 46e:	7f 93       	push	r23
 470:	8f 93       	push	r24
 472:	9f 93       	push	r25
 474:	af 93       	push	r26
 476:	bf 93       	push	r27
 478:	ef 93       	push	r30
 47a:	ff 93       	push	r31
  switch(TW_STATUS){
 47c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 480:	88 7f       	andi	r24, 0xF8	; 248
 482:	80 36       	cpi	r24, 0x60	; 96
 484:	09 f4       	brne	.+2      	; 0x488 <__vector_24+0x2e>
 486:	4a c0       	rjmp	.+148    	; 0x51c <__vector_24+0xc2>
 488:	f0 f5       	brcc	.+124    	; 0x506 <__vector_24+0xac>
 48a:	88 32       	cpi	r24, 0x28	; 40
 48c:	09 f4       	brne	.+2      	; 0x490 <__vector_24+0x36>
 48e:	a7 c0       	rjmp	.+334    	; 0x5de <__vector_24+0x184>
 490:	18 f5       	brcc	.+70     	; 0x4d8 <__vector_24+0x7e>
 492:	80 31       	cpi	r24, 0x10	; 16
 494:	09 f4       	brne	.+2      	; 0x498 <__vector_24+0x3e>
 496:	9b c0       	rjmp	.+310    	; 0x5ce <__vector_24+0x174>
 498:	b8 f4       	brcc	.+46     	; 0x4c8 <__vector_24+0x6e>
 49a:	88 23       	and	r24, r24
 49c:	09 f4       	brne	.+2      	; 0x4a0 <__vector_24+0x46>
 49e:	f9 c0       	rjmp	.+498    	; 0x692 <__vector_24+0x238>
 4a0:	88 30       	cpi	r24, 0x08	; 8
 4a2:	09 f4       	brne	.+2      	; 0x4a6 <__vector_24+0x4c>
 4a4:	94 c0       	rjmp	.+296    	; 0x5ce <__vector_24+0x174>
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
 4a6:	ff 91       	pop	r31
 4a8:	ef 91       	pop	r30
 4aa:	bf 91       	pop	r27
 4ac:	af 91       	pop	r26
 4ae:	9f 91       	pop	r25
 4b0:	8f 91       	pop	r24
 4b2:	7f 91       	pop	r23
 4b4:	6f 91       	pop	r22
 4b6:	5f 91       	pop	r21
 4b8:	4f 91       	pop	r20
 4ba:	3f 91       	pop	r19
 4bc:	2f 91       	pop	r18
 4be:	0f 90       	pop	r0
 4c0:	0f be       	out	0x3f, r0	; 63
 4c2:	0f 90       	pop	r0
 4c4:	1f 90       	pop	r1
 4c6:	18 95       	reti
  memcpy(data, &twi_masterBuffer, length);
  return length;
}

ISR(TWI_vect){
  switch(TW_STATUS){
 4c8:	88 31       	cpi	r24, 0x18	; 24
 4ca:	09 f4       	brne	.+2      	; 0x4ce <__vector_24+0x74>
 4cc:	88 c0       	rjmp	.+272    	; 0x5de <__vector_24+0x184>
 4ce:	80 32       	cpi	r24, 0x20	; 32
 4d0:	51 f7       	brne	.-44     	; 0x4a6 <__vector_24+0x4c>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
 4d2:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <twi_error>
 4d6:	14 c0       	rjmp	.+40     	; 0x500 <__vector_24+0xa6>
  memcpy(data, &twi_masterBuffer, length);
  return length;
}

ISR(TWI_vect){
  switch(TW_STATUS){
 4d8:	80 34       	cpi	r24, 0x40	; 64
 4da:	09 f4       	brne	.+2      	; 0x4de <__vector_24+0x84>
 4dc:	9d c0       	rjmp	.+314    	; 0x618 <__vector_24+0x1be>
 4de:	40 f4       	brcc	.+16     	; 0x4f0 <__vector_24+0x96>
 4e0:	80 33       	cpi	r24, 0x30	; 48
 4e2:	b9 f3       	breq	.-18     	; 0x4d2 <__vector_24+0x78>
 4e4:	88 33       	cpi	r24, 0x38	; 56
 4e6:	f9 f6       	brne	.-66     	; 0x4a6 <__vector_24+0x4c>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
 4e8:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <twi_error>
void twi_attachSlaveTxEvent( void (*function)(void) ) {twi_onSlaveTransmit = function;}

inline void twi_reply(bool ack){
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
 4ec:	85 ec       	ldi	r24, 0xC5	; 197
 4ee:	b0 c0       	rjmp	.+352    	; 0x650 <__vector_24+0x1f6>
  memcpy(data, &twi_masterBuffer, length);
  return length;
}

ISR(TWI_vect){
  switch(TW_STATUS){
 4f0:	80 35       	cpi	r24, 0x50	; 80
 4f2:	09 f4       	brne	.+2      	; 0x4f6 <__vector_24+0x9c>
 4f4:	85 c0       	rjmp	.+266    	; 0x600 <__vector_24+0x1a6>
 4f6:	88 35       	cpi	r24, 0x58	; 88
 4f8:	09 f4       	brne	.+2      	; 0x4fc <__vector_24+0xa2>
 4fa:	96 c0       	rjmp	.+300    	; 0x628 <__vector_24+0x1ce>
 4fc:	88 34       	cpi	r24, 0x48	; 72
 4fe:	99 f6       	brne	.-90     	; 0x4a6 <__vector_24+0x4c>
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
 500:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <twi_stop>
 504:	d0 cf       	rjmp	.-96     	; 0x4a6 <__vector_24+0x4c>
  memcpy(data, &twi_masterBuffer, length);
  return length;
}

ISR(TWI_vect){
  switch(TW_STATUS){
 506:	88 39       	cpi	r24, 0x98	; 152
 508:	09 f4       	brne	.+2      	; 0x50c <__vector_24+0xb2>
 50a:	8c c0       	rjmp	.+280    	; 0x624 <__vector_24+0x1ca>
 50c:	38 f5       	brcc	.+78     	; 0x55c <__vector_24+0x102>
 50e:	88 37       	cpi	r24, 0x78	; 120
 510:	29 f0       	breq	.+10     	; 0x51c <__vector_24+0xc2>
 512:	50 f4       	brcc	.+20     	; 0x528 <__vector_24+0xce>
 514:	88 36       	cpi	r24, 0x68	; 104
 516:	11 f0       	breq	.+4      	; 0x51c <__vector_24+0xc2>
 518:	80 37       	cpi	r24, 0x70	; 112
 51a:	29 f6       	brne	.-118    	; 0x4a6 <__vector_24+0x4c>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
 51c:	83 e0       	ldi	r24, 0x03	; 3
 51e:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
 522:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <twi_rxBufferIndex>
 526:	57 c0       	rjmp	.+174    	; 0x5d6 <__vector_24+0x17c>
  memcpy(data, &twi_masterBuffer, length);
  return length;
}

ISR(TWI_vect){
  switch(TW_STATUS){
 528:	88 38       	cpi	r24, 0x88	; 136
 52a:	09 f4       	brne	.+2      	; 0x52e <__vector_24+0xd4>
 52c:	7b c0       	rjmp	.+246    	; 0x624 <__vector_24+0x1ca>
 52e:	80 39       	cpi	r24, 0x90	; 144
 530:	19 f0       	breq	.+6      	; 0x538 <__vector_24+0xde>
 532:	80 38       	cpi	r24, 0x80	; 128
 534:	09 f0       	breq	.+2      	; 0x538 <__vector_24+0xde>
 536:	b7 cf       	rjmp	.-146    	; 0x4a6 <__vector_24+0x4c>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
 538:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <twi_rxBufferIndex>
 53c:	80 32       	cpi	r24, 0x20	; 32
 53e:	08 f0       	brcs	.+2      	; 0x542 <__vector_24+0xe8>
 540:	71 c0       	rjmp	.+226    	; 0x624 <__vector_24+0x1ca>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
 542:	e0 91 7f 01 	lds	r30, 0x017F	; 0x80017f <twi_rxBufferIndex>
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	8e 0f       	add	r24, r30
 54a:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <twi_rxBufferIndex>
 54e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 552:	f0 e0       	ldi	r31, 0x00	; 0
 554:	e1 5a       	subi	r30, 0xA1	; 161
 556:	fe 4f       	sbci	r31, 0xFE	; 254
 558:	80 83       	st	Z, r24
 55a:	3d c0       	rjmp	.+122    	; 0x5d6 <__vector_24+0x17c>
  memcpy(data, &twi_masterBuffer, length);
  return length;
}

ISR(TWI_vect){
  switch(TW_STATUS){
 55c:	80 3b       	cpi	r24, 0xB0	; 176
 55e:	39 f0       	breq	.+14     	; 0x56e <__vector_24+0x114>
 560:	e0 f4       	brcc	.+56     	; 0x59a <__vector_24+0x140>
 562:	80 3a       	cpi	r24, 0xA0	; 160
 564:	09 f4       	brne	.+2      	; 0x568 <__vector_24+0x10e>
 566:	79 c0       	rjmp	.+242    	; 0x65a <__vector_24+0x200>
 568:	88 3a       	cpi	r24, 0xA8	; 168
 56a:	09 f0       	breq	.+2      	; 0x56e <__vector_24+0x114>
 56c:	9c cf       	rjmp	.-200    	; 0x4a6 <__vector_24+0x4c>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
 56e:	84 e0       	ldi	r24, 0x04	; 4
 570:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
 574:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
 578:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
 57c:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <twi_onSlaveTransmit>
 580:	f0 91 8c 01 	lds	r31, 0x018C	; 0x80018c <twi_onSlaveTransmit+0x1>
 584:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
 586:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <twi_txBufferLength>
 58a:	81 11       	cpse	r24, r1
 58c:	0f c0       	rjmp	.+30     	; 0x5ac <__vector_24+0x152>
        twi_txBufferLength = 1;
 58e:	81 e0       	ldi	r24, 0x01	; 1
 590:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
 594:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <twi_txBuffer>
 598:	09 c0       	rjmp	.+18     	; 0x5ac <__vector_24+0x152>
  memcpy(data, &twi_masterBuffer, length);
  return length;
}

ISR(TWI_vect){
  switch(TW_STATUS){
 59a:	80 3c       	cpi	r24, 0xC0	; 192
 59c:	09 f4       	brne	.+2      	; 0x5a0 <__vector_24+0x146>
 59e:	a6 cf       	rjmp	.-180    	; 0x4ec <__vector_24+0x92>
 5a0:	88 3c       	cpi	r24, 0xC8	; 200
 5a2:	09 f4       	brne	.+2      	; 0x5a6 <__vector_24+0x14c>
 5a4:	a3 cf       	rjmp	.-186    	; 0x4ec <__vector_24+0x92>
 5a6:	88 3b       	cpi	r24, 0xB8	; 184
 5a8:	09 f0       	breq	.+2      	; 0x5ac <__vector_24+0x152>
 5aa:	7d cf       	rjmp	.-262    	; 0x4a6 <__vector_24+0x4c>
      }
      __attribute__ ((fallthrough));      
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
 5ac:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <twi_txBufferIndex>
 5b0:	81 e0       	ldi	r24, 0x01	; 1
 5b2:	8e 0f       	add	r24, r30
 5b4:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <twi_txBufferIndex>
 5b8:	f0 e0       	ldi	r31, 0x00	; 0
 5ba:	e3 5c       	subi	r30, 0xC3	; 195
 5bc:	fe 4f       	sbci	r31, 0xFE	; 254
 5be:	80 81       	ld	r24, Z
 5c0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
 5c4:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <twi_txBufferIndex>
 5c8:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <twi_txBufferLength>
 5cc:	29 c0       	rjmp	.+82     	; 0x620 <__vector_24+0x1c6>
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
 5ce:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <twi_slarw>
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
 5d2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
void twi_attachSlaveTxEvent( void (*function)(void) ) {twi_onSlaveTransmit = function;}

inline void twi_reply(bool ack){
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
 5d6:	85 ec       	ldi	r24, 0xC5	; 197
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
 5d8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 5dc:	64 cf       	rjmp	.-312    	; 0x4a6 <__vector_24+0x4c>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
 5de:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <twi_masterBufferIndex>
 5e2:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <twi_masterBufferLength>
 5e6:	98 17       	cp	r25, r24
 5e8:	58 f5       	brcc	.+86     	; 0x640 <__vector_24+0x1e6>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
 5ea:	e0 91 b2 01 	lds	r30, 0x01B2	; 0x8001b2 <twi_masterBufferIndex>
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	8e 0f       	add	r24, r30
 5f2:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <twi_masterBufferIndex>
 5f6:	f0 e0       	ldi	r31, 0x00	; 0
 5f8:	ef 56       	subi	r30, 0x6F	; 111
 5fa:	fe 4f       	sbci	r31, 0xFE	; 254
 5fc:	80 81       	ld	r24, Z
 5fe:	e9 cf       	rjmp	.-46     	; 0x5d2 <__vector_24+0x178>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
 600:	e0 91 b2 01 	lds	r30, 0x01B2	; 0x8001b2 <twi_masterBufferIndex>
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	8e 0f       	add	r24, r30
 608:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <twi_masterBufferIndex>
 60c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 610:	f0 e0       	ldi	r31, 0x00	; 0
 612:	ef 56       	subi	r30, 0x6F	; 111
 614:	fe 4f       	sbci	r31, 0xFE	; 254
 616:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
 618:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <twi_masterBufferIndex>
 61c:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <twi_masterBufferLength>
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
 620:	98 17       	cp	r25, r24
 622:	c8 f2       	brcs	.-78     	; 0x5d6 <__vector_24+0x17c>
inline void twi_reply(bool ack){
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
 624:	85 e8       	ldi	r24, 0x85	; 133
 626:	d8 cf       	rjmp	.-80     	; 0x5d8 <__vector_24+0x17e>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
 628:	e0 91 b2 01 	lds	r30, 0x01B2	; 0x8001b2 <twi_masterBufferIndex>
 62c:	81 e0       	ldi	r24, 0x01	; 1
 62e:	8e 0f       	add	r24, r30
 630:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <twi_masterBufferIndex>
 634:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 638:	f0 e0       	ldi	r31, 0x00	; 0
 63a:	ef 56       	subi	r30, 0x6F	; 111
 63c:	fe 4f       	sbci	r31, 0xFE	; 254
 63e:	80 83       	st	Z, r24
      if (twi_sendStop){
 640:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <twi_sendStop>
 644:	81 11       	cpse	r24, r1
 646:	5c cf       	rjmp	.-328    	; 0x500 <__vector_24+0xa6>
        twi_stop();
      } else {
        twi_inRepStart = true;  // we're gonna send the START
 648:	81 e0       	ldi	r24, 0x01	; 1
 64a:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <twi_inRepStart>
        // don't enable the interrupt. We'll generate the start, but we
        // avoid handling the interrupt until we're in the next transaction,
        // at the point where we would normally issue the start.
        TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
 64e:	84 ea       	ldi	r24, 0xA4	; 164
void twi_attachSlaveTxEvent( void (*function)(void) ) {twi_onSlaveTransmit = function;}

inline void twi_reply(bool ack){
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
 650:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
 654:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <twi_state>
 658:	26 cf       	rjmp	.-436    	; 0x4a6 <__vector_24+0x4c>
  twi_state = TWI_READY;
}

void twi_releaseBus(void){
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
 65a:	85 ec       	ldi	r24, 0xC5	; 197
 65c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
  // update twi state
  twi_state = TWI_READY;
 660:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <twi_state>
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
 664:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <twi_rxBufferIndex>
 668:	80 32       	cpi	r24, 0x20	; 32
 66a:	30 f4       	brcc	.+12     	; 0x678 <__vector_24+0x21e>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
 66c:	e0 91 7f 01 	lds	r30, 0x017F	; 0x80017f <twi_rxBufferIndex>
 670:	f0 e0       	ldi	r31, 0x00	; 0
 672:	e1 5a       	subi	r30, 0xA1	; 161
 674:	fe 4f       	sbci	r31, 0xFE	; 254
 676:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
 678:	60 91 7f 01 	lds	r22, 0x017F	; 0x80017f <twi_rxBufferIndex>
 67c:	70 e0       	ldi	r23, 0x00	; 0
 67e:	e0 91 89 01 	lds	r30, 0x0189	; 0x800189 <twi_onSlaveReceive>
 682:	f0 91 8a 01 	lds	r31, 0x018A	; 0x80018a <twi_onSlaveReceive+0x1>
 686:	8f e5       	ldi	r24, 0x5F	; 95
 688:	91 e0       	ldi	r25, 0x01	; 1
 68a:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
 68c:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <twi_rxBufferIndex>
 690:	0a cf       	rjmp	.-492    	; 0x4a6 <__vector_24+0x4c>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
 692:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <twi_error>
 696:	34 cf       	rjmp	.-408    	; 0x500 <__vector_24+0xa6>

00000698 <main>:

void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
 698:	cf 93       	push	r28
 69a:	df 93       	push	r29
 69c:	00 d0       	rcall	.+0      	; 0x69e <main+0x6>
 69e:	1f 92       	push	r1
 6a0:	cd b7       	in	r28, 0x3d	; 61
 6a2:	de b7       	in	r29, 0x3e	; 62

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 6a4:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 6a6:	84 b5       	in	r24, 0x24	; 36
 6a8:	82 60       	ori	r24, 0x02	; 2
 6aa:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 6ac:	84 b5       	in	r24, 0x24	; 36
 6ae:	81 60       	ori	r24, 0x01	; 1
 6b0:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 6b2:	85 b5       	in	r24, 0x25	; 37
 6b4:	82 60       	ori	r24, 0x02	; 2
 6b6:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 6b8:	85 b5       	in	r24, 0x25	; 37
 6ba:	81 60       	ori	r24, 0x01	; 1
 6bc:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 6be:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
 6c2:	81 60       	ori	r24, 0x01	; 1
 6c4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 6c8:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 6cc:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
 6d0:	82 60       	ori	r24, 0x02	; 2
 6d2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 6d6:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
 6da:	81 60       	ori	r24, 0x01	; 1
 6dc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 6e0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 6e4:	81 60       	ori	r24, 0x01	; 1
 6e6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 6ea:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
 6ee:	84 60       	ori	r24, 0x04	; 4
 6f0:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 6f4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
 6f8:	81 60       	ori	r24, 0x01	; 1
 6fa:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 6fe:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 702:	84 60       	ori	r24, 0x04	; 4
 704:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
		sbi(ADCSRA, ADPS1);
 708:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 70c:	82 60       	ori	r24, 0x02	; 2
 70e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
		sbi(ADCSRA, ADPS0);
 712:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 716:	81 60       	ori	r24, 0x01	; 1
 718:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 71c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 720:	80 68       	ori	r24, 0x80	; 128
 722:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 726:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
 72a:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <_ZN7TwoWire13rxBufferIndexE>
  rxBufferLength = 0;
 72e:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <_ZN7TwoWire14rxBufferLengthE>

  txBufferIndex = 0;
  txBufferLength = 0;

  twi_init();
 732:	0e 94 9f 00 	call	0x13e	; 0x13e <twi_init>
  return 0;
}

void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) ) {twi_onSlaveReceive = function;}

void twi_attachSlaveTxEvent( void (*function)(void) ) {twi_onSlaveTransmit = function;}
 736:	88 e7       	ldi	r24, 0x78	; 120
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <twi_onSlaveTransmit+0x1>
 73e:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <twi_onSlaveTransmit>
  twi_txBufferLength += length;
  
  return 0;
}

void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) ) {twi_onSlaveReceive = function;}
 742:	89 e7       	ldi	r24, 0x79	; 121
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <twi_onSlaveReceive+0x1>
 74a:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <twi_onSlaveReceive>
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
 74e:	77 24       	eor	r7, r7
 750:	73 94       	inc	r7
  // set address of targeted slave
  txAddress = address;
 752:	98 e0       	ldi	r25, 0x08	; 8
 754:	69 2e       	mov	r6, r25
go2:
    
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  } else {
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
 756:	25 ee       	ldi	r18, 0xE5	; 229
 758:	52 2e       	mov	r5, r18
    if (!(counter_3--)) goto check2;
    twi_handleTimeout(twi_do_reset_on_timeout); 
    return 5; //timeout
go2:
    
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
 75a:	35 ec       	ldi	r19, 0xC5	; 197
 75c:	43 2e       	mov	r4, r19
	
	setup();
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 75e:	00 e0       	ldi	r16, 0x00	; 0
 760:	10 e0       	ldi	r17, 0x00	; 0
  if (!(counter_2--)) goto check1;
  if (!(counter_3--)) goto check1;
  twi_handleTimeout(twi_do_reset_on_timeout); 
  return 5; //timeout
go1:  
  twi_state = TWI_MTX;
 762:	42 e0       	ldi	r20, 0x02	; 2
 764:	34 2e       	mov	r3, r20
  twi_sendStop = sendStop;
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
 766:	22 24       	eor	r2, r2
 768:	2a 94       	dec	r2
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
 76a:	70 92 b8 01 	sts	0x01B8, r7	; 0x8001b8 <_ZN7TwoWire12transmittingE>
  // set address of targeted slave
  txAddress = address;
 76e:	60 92 da 01 	sts	0x01DA, r6	; 0x8001da <_ZN7TwoWire9txAddressE>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 772:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
 776:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <_ZN7TwoWire14txBufferLengthE>
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 77a:	45 e0       	ldi	r20, 0x05	; 5
 77c:	50 e0       	ldi	r21, 0x00	; 0
 77e:	65 e1       	ldi	r22, 0x15	; 21
 780:	71 e0       	ldi	r23, 0x01	; 1
 782:	8d ed       	ldi	r24, 0xDD	; 221
 784:	91 e0       	ldi	r25, 0x01	; 1
 786:	0e 94 87 01 	call	0x30e	; 0x30e <_ZN7TwoWire5writeEPKhj>
byte x = 0;

void loop() {
  Wire.beginTransmission(8); // transmit to device #8
  Wire.write("x is ");        // sends five bytes
  Wire.write(x);              // sends one byte
 78a:	60 91 dc 01 	lds	r22, 0x01DC	; 0x8001dc <x>
 78e:	8d ed       	ldi	r24, 0xDD	; 221
 790:	91 e0       	ldi	r25, 0x01	; 1
 792:	0e 94 b4 01 	call	0x368	; 0x368 <_ZN7TwoWire5writeEh>
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
  // transmit buffer (blocking)
  uint8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
 796:	40 91 db 01 	lds	r20, 0x01DB	; 0x8001db <_ZN7TwoWire14txBufferLengthE>
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, bool wait, bool sendStop){
  volatile uint8_t counter_1;
  volatile uint8_t counter_2;
  volatile uint8_t counter_3;
  // ensure data will it into buffer
  if(TWI_BUFFER_LENGTH < length) return 1;
 79a:	41 32       	cpi	r20, 0x21	; 33
 79c:	70 f5       	brcc	.+92     	; 0x7fa <main+0x162>
 79e:	f0 90 da 01 	lds	r15, 0x01DA	; 0x8001da <_ZN7TwoWire9txAddressE>

  // wait until twi is ready, become master transmitter
  if (!twi_timeout_off_flag){
 7a2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <twi_timeout_off_flag>
 7a6:	81 11       	cpse	r24, r1
 7a8:	09 c0       	rjmp	.+18     	; 0x7bc <main+0x124>
    counter_1 = set_1;
 7aa:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <set_1>
 7ae:	8b 83       	std	Y+3, r24	; 0x03
    counter_2 = set_2;
 7b0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <set_2>
 7b4:	8a 83       	std	Y+2, r24	; 0x02
    counter_3 = set_3;
 7b6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 7ba:	89 83       	std	Y+1, r24	; 0x01
  }
check1:                                        
  if (TWI_READY == twi_state) goto go1;
 7bc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <twi_state>
 7c0:	88 23       	and	r24, r24
 7c2:	09 f4       	brne	.+2      	; 0x7c6 <main+0x12e>
 7c4:	51 c0       	rjmp	.+162    	; 0x868 <main+0x1d0>
  if (twi_timeout_off_flag) goto check1;
 7c6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <twi_timeout_off_flag>
 7ca:	81 11       	cpse	r24, r1
 7cc:	f7 cf       	rjmp	.-18     	; 0x7bc <main+0x124>
  if (!(counter_1--)) goto check1;
 7ce:	8b 81       	ldd	r24, Y+3	; 0x03
 7d0:	9f ef       	ldi	r25, 0xFF	; 255
 7d2:	98 0f       	add	r25, r24
 7d4:	9b 83       	std	Y+3, r25	; 0x03
 7d6:	88 23       	and	r24, r24
 7d8:	89 f3       	breq	.-30     	; 0x7bc <main+0x124>
  if (!(counter_2--)) goto check1;
 7da:	8a 81       	ldd	r24, Y+2	; 0x02
 7dc:	9f ef       	ldi	r25, 0xFF	; 255
 7de:	98 0f       	add	r25, r24
 7e0:	9a 83       	std	Y+2, r25	; 0x02
 7e2:	88 23       	and	r24, r24
 7e4:	59 f3       	breq	.-42     	; 0x7bc <main+0x124>
  if (!(counter_3--)) goto check1;
 7e6:	89 81       	ldd	r24, Y+1	; 0x01
 7e8:	9f ef       	ldi	r25, 0xFF	; 255
 7ea:	98 0f       	add	r25, r24
 7ec:	99 83       	std	Y+1, r25	; 0x01
 7ee:	88 23       	and	r24, r24
 7f0:	29 f3       	breq	.-54     	; 0x7bc <main+0x124>
  if (!(wait && (TWI_MTX == twi_state))) goto go3;
  if (twi_timeout_off_flag) goto check3;
  if (!(counter_1--)) goto check3;
  if (!(counter_2--)) goto check3;
  if (!(counter_3--)) goto check3;
  twi_handleTimeout(twi_do_reset_on_timeout);  
 7f2:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <twi_do_reset_on_timeout>
 7f6:	0e 94 c5 00 	call	0x18a	; 0x18a <twi_handleTimeout>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 7fa:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
 7fe:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <_ZN7TwoWire14txBufferLengthE>
  // indicate that we are done transmitting
  transmitting = 0;
 802:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <_ZN7TwoWire12transmittingE>
  Wire.endTransmission();    // stop transmitting

  x++;
 806:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <x>
 80a:	8f 5f       	subi	r24, 0xFF	; 255
 80c:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <x>
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint32_t start = micros();
 810:	0e 94 7a 00 	call	0xf4	; 0xf4 <micros>
 814:	4b 01       	movw	r8, r22
 816:	5c 01       	movw	r10, r24
 818:	84 ef       	ldi	r24, 0xF4	; 244
 81a:	c8 2e       	mov	r12, r24
 81c:	dd 24       	eor	r13, r13
 81e:	d3 94       	inc	r13
 820:	e1 2c       	mov	r14, r1
 822:	f1 2c       	mov	r15, r1

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
 824:	0e 94 7a 00 	call	0xf4	; 0xf4 <micros>
 828:	68 19       	sub	r22, r8
 82a:	79 09       	sbc	r23, r9
 82c:	8a 09       	sbc	r24, r10
 82e:	9b 09       	sbc	r25, r11
 830:	68 3e       	cpi	r22, 0xE8	; 232
 832:	73 40       	sbci	r23, 0x03	; 3
 834:	81 05       	cpc	r24, r1
 836:	91 05       	cpc	r25, r1
 838:	a8 f3       	brcs	.-22     	; 0x824 <main+0x18c>
			ms--;
 83a:	21 e0       	ldi	r18, 0x01	; 1
 83c:	c2 1a       	sub	r12, r18
 83e:	d1 08       	sbc	r13, r1
 840:	e1 08       	sbc	r14, r1
 842:	f1 08       	sbc	r15, r1
			start += 1000;
 844:	88 ee       	ldi	r24, 0xE8	; 232
 846:	88 0e       	add	r8, r24
 848:	83 e0       	ldi	r24, 0x03	; 3
 84a:	98 1e       	adc	r9, r24
 84c:	a1 1c       	adc	r10, r1
 84e:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
 850:	c1 14       	cp	r12, r1
 852:	d1 04       	cpc	r13, r1
 854:	e1 04       	cpc	r14, r1
 856:	f1 04       	cpc	r15, r1
 858:	29 f7       	brne	.-54     	; 0x824 <main+0x18c>
 85a:	01 15       	cp	r16, r1
 85c:	11 05       	cpc	r17, r1
 85e:	09 f4       	brne	.+2      	; 0x862 <main+0x1ca>
 860:	84 cf       	rjmp	.-248    	; 0x76a <main+0xd2>
 862:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 866:	81 cf       	rjmp	.-254    	; 0x76a <main+0xd2>
  if (!(counter_2--)) goto check1;
  if (!(counter_3--)) goto check1;
  twi_handleTimeout(twi_do_reset_on_timeout); 
  return 5; //timeout
go1:  
  twi_state = TWI_MTX;
 868:	30 92 b6 01 	sts	0x01B6, r3	; 0x8001b6 <twi_state>
  twi_sendStop = sendStop;
 86c:	70 92 b4 01 	sts	0x01B4, r7	; 0x8001b4 <twi_sendStop>
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
 870:	20 92 b3 01 	sts	0x01B3, r2	; 0x8001b3 <twi_error>

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
 874:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <twi_masterBufferIndex>
  twi_masterBufferLength = length;
 878:	40 93 b1 01 	sts	0x01B1, r20	; 0x8001b1 <twi_masterBufferLength>
  // copy data to twi buffer
  memcpy(&twi_masterBuffer, data, length); 
 87c:	50 e0       	ldi	r21, 0x00	; 0
 87e:	6a eb       	ldi	r22, 0xBA	; 186
 880:	71 e0       	ldi	r23, 0x01	; 1
 882:	81 e9       	ldi	r24, 0x91	; 145
 884:	91 e0       	ldi	r25, 0x01	; 1
 886:	0e 94 cc 04 	call	0x998	; 0x998 <memcpy>
   
  // build sla+w, slave device address + w bit (TW_WRITE = 0)
  twi_slarw = address << 1;
 88a:	ff 0c       	add	r15, r15
 88c:	f0 92 90 01 	sts	0x0190, r15	; 0x800190 <twi_slarw>
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (twi_inRepStart) {
 890:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <twi_inRepStart>
 894:	88 23       	and	r24, r24
 896:	09 f4       	brne	.+2      	; 0x89a <main+0x202>
 898:	58 c0       	rjmp	.+176    	; 0x94a <__stack+0x4b>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;      // remember, we're dealing with an ASYNC ISR
 89a:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <twi_inRepStart>
    TWDR = twi_slarw;
 89e:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <twi_slarw>
 8a2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    
    if (!twi_timeout_off_flag){
 8a6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <twi_timeout_off_flag>
 8aa:	81 11       	cpse	r24, r1
 8ac:	09 c0       	rjmp	.+18     	; 0x8c0 <main+0x228>
      counter_1 = set_1;
 8ae:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <set_1>
 8b2:	8b 83       	std	Y+3, r24	; 0x03
      counter_2 = set_2;
 8b4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <set_2>
 8b8:	8a 83       	std	Y+2, r24	; 0x02
      counter_3 = set_3;
 8ba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 8be:	89 83       	std	Y+1, r24	; 0x01
    }
check2:                                        
    if (!(TWCR & _BV(TWWC))) goto go2;
 8c0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 8c4:	83 ff       	sbrs	r24, 3
 8c6:	17 c0       	rjmp	.+46     	; 0x8f6 <main+0x25e>
    if (twi_timeout_off_flag) goto check2;
 8c8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <twi_timeout_off_flag>
 8cc:	81 11       	cpse	r24, r1
 8ce:	f8 cf       	rjmp	.-16     	; 0x8c0 <main+0x228>
    if (!(counter_1--)) goto check2;
 8d0:	8b 81       	ldd	r24, Y+3	; 0x03
 8d2:	9f ef       	ldi	r25, 0xFF	; 255
 8d4:	98 0f       	add	r25, r24
 8d6:	9b 83       	std	Y+3, r25	; 0x03
 8d8:	88 23       	and	r24, r24
 8da:	91 f3       	breq	.-28     	; 0x8c0 <main+0x228>
    if (!(counter_2--)) goto check2;
 8dc:	8a 81       	ldd	r24, Y+2	; 0x02
 8de:	9f ef       	ldi	r25, 0xFF	; 255
 8e0:	98 0f       	add	r25, r24
 8e2:	9a 83       	std	Y+2, r25	; 0x02
 8e4:	88 23       	and	r24, r24
 8e6:	61 f3       	breq	.-40     	; 0x8c0 <main+0x228>
    if (!(counter_3--)) goto check2;
 8e8:	89 81       	ldd	r24, Y+1	; 0x01
 8ea:	9f ef       	ldi	r25, 0xFF	; 255
 8ec:	98 0f       	add	r25, r24
 8ee:	99 83       	std	Y+1, r25	; 0x01
 8f0:	88 23       	and	r24, r24
 8f2:	31 f3       	breq	.-52     	; 0x8c0 <main+0x228>
 8f4:	7e cf       	rjmp	.-260    	; 0x7f2 <main+0x15a>
    twi_handleTimeout(twi_do_reset_on_timeout); 
    return 5; //timeout
go2:
    
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
 8f6:	40 92 bc 00 	sts	0x00BC, r4	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
  }

  // wait for write operation to complete
  if (!twi_timeout_off_flag){
 8fa:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <twi_timeout_off_flag>
 8fe:	81 11       	cpse	r24, r1
 900:	09 c0       	rjmp	.+18     	; 0x914 <__stack+0x15>
    counter_1 = set_1;
 902:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <set_1>
 906:	8b 83       	std	Y+3, r24	; 0x03
    counter_2 = set_2;
 908:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <set_2>
 90c:	8a 83       	std	Y+2, r24	; 0x02
    counter_3 = set_3;
 90e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 912:	89 83       	std	Y+1, r24	; 0x01
  }
check3:                                        
  if (!(wait && (TWI_MTX == twi_state))) goto go3;
 914:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <twi_state>
 918:	82 30       	cpi	r24, 0x02	; 2
 91a:	d1 f4       	brne	.+52     	; 0x950 <__stack+0x51>
  if (twi_timeout_off_flag) goto check3;
 91c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <twi_timeout_off_flag>
 920:	81 11       	cpse	r24, r1
 922:	f8 cf       	rjmp	.-16     	; 0x914 <__stack+0x15>
  if (!(counter_1--)) goto check3;
 924:	8b 81       	ldd	r24, Y+3	; 0x03
 926:	9f ef       	ldi	r25, 0xFF	; 255
 928:	98 0f       	add	r25, r24
 92a:	9b 83       	std	Y+3, r25	; 0x03
 92c:	88 23       	and	r24, r24
 92e:	91 f3       	breq	.-28     	; 0x914 <__stack+0x15>
  if (!(counter_2--)) goto check3;
 930:	8a 81       	ldd	r24, Y+2	; 0x02
 932:	9f ef       	ldi	r25, 0xFF	; 255
 934:	98 0f       	add	r25, r24
 936:	9a 83       	std	Y+2, r25	; 0x02
 938:	88 23       	and	r24, r24
 93a:	61 f3       	breq	.-40     	; 0x914 <__stack+0x15>
  if (!(counter_3--)) goto check3;
 93c:	89 81       	ldd	r24, Y+1	; 0x01
 93e:	9f ef       	ldi	r25, 0xFF	; 255
 940:	98 0f       	add	r25, r24
 942:	99 83       	std	Y+1, r25	; 0x01
 944:	88 23       	and	r24, r24
 946:	31 f3       	breq	.-52     	; 0x914 <__stack+0x15>
 948:	54 cf       	rjmp	.-344    	; 0x7f2 <main+0x15a>
go2:
    
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  } else {
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
 94a:	50 92 bc 00 	sts	0x00BC, r5	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 94e:	d5 cf       	rjmp	.-86     	; 0x8fa <main+0x262>
  if (!(counter_2--)) goto check3;
  if (!(counter_3--)) goto check3;
  twi_handleTimeout(twi_do_reset_on_timeout);  
  return 5; //timeout
go3:
  if (twi_error == 0xFF)
 950:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <twi_error>
 954:	8f 3f       	cpi	r24, 0xFF	; 255
 956:	09 f4       	brne	.+2      	; 0x95a <__stack+0x5b>
 958:	50 cf       	rjmp	.-352    	; 0x7fa <main+0x162>
    return 0; // success
  else if (twi_error == TW_MT_SLA_NACK)
 95a:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <twi_error>
 95e:	80 32       	cpi	r24, 0x20	; 32
 960:	09 f4       	brne	.+2      	; 0x964 <__stack+0x65>
 962:	4b cf       	rjmp	.-362    	; 0x7fa <main+0x162>
    return 2; // error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
 964:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <twi_error>
 968:	48 cf       	rjmp	.-368    	; 0x7fa <main+0x162>

0000096a <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 96a:	ed ed       	ldi	r30, 0xDD	; 221
 96c:	f1 e0       	ldi	r31, 0x01	; 1
 96e:	13 82       	std	Z+3, r1	; 0x03
 970:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
 972:	88 ee       	ldi	r24, 0xE8	; 232
 974:	93 e0       	ldi	r25, 0x03	; 3
 976:	a0 e0       	ldi	r26, 0x00	; 0
 978:	b0 e0       	ldi	r27, 0x00	; 0
 97a:	84 83       	std	Z+4, r24	; 0x04
 97c:	95 83       	std	Z+5, r25	; 0x05
 97e:	a6 83       	std	Z+6, r26	; 0x06
 980:	b7 83       	std	Z+7, r27	; 0x07
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
 982:	87 e0       	ldi	r24, 0x07	; 7
 984:	91 e0       	ldi	r25, 0x01	; 1
 986:	91 83       	std	Z+1, r25	; 0x01
 988:	80 83       	st	Z, r24
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
 98a:	08 95       	ret

0000098c <__tablejump2__>:
 98c:	ee 0f       	add	r30, r30
 98e:	ff 1f       	adc	r31, r31
 990:	05 90       	lpm	r0, Z+
 992:	f4 91       	lpm	r31, Z
 994:	e0 2d       	mov	r30, r0
 996:	09 94       	ijmp

00000998 <memcpy>:
 998:	fb 01       	movw	r30, r22
 99a:	dc 01       	movw	r26, r24
 99c:	02 c0       	rjmp	.+4      	; 0x9a2 <memcpy+0xa>
 99e:	01 90       	ld	r0, Z+
 9a0:	0d 92       	st	X+, r0
 9a2:	41 50       	subi	r20, 0x01	; 1
 9a4:	50 40       	sbci	r21, 0x00	; 0
 9a6:	d8 f7       	brcc	.-10     	; 0x99e <memcpy+0x6>
 9a8:	08 95       	ret

000009aa <_exit>:
 9aa:	f8 94       	cli

000009ac <__stop_program>:
 9ac:	ff cf       	rjmp	.-2      	; 0x9ac <__stop_program>
