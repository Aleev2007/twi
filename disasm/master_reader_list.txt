
master_reader.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__ctors_end>
   4:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
   8:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
   c:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  10:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  14:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  18:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  1c:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  20:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  24:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  28:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  2c:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  30:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  34:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  38:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  3c:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  40:	0c 94 ec 02 	jmp	0x5d8	; 0x5d8 <__vector_16>
  44:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  48:	0c 94 ba 02 	jmp	0x574	; 0x574 <__vector_18>
  4c:	0c 94 94 02 	jmp	0x528	; 0x528 <__vector_19>
  50:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  54:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  58:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  5c:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  60:	0c 94 36 03 	jmp	0x66c	; 0x66c <__vector_24>
  64:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 00       	nop
  6c:	25 00       	.word	0x0025	; ????
  6e:	28 00       	.word	0x0028	; ????
  70:	2b 00       	.word	0x002b	; ????

00000072 <digital_pin_to_port_PGM>:
  72:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  82:	03 03 03 03                                         ....

00000086 <digital_pin_to_bit_mask_PGM>:
  86:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  96:	04 08 10 20                                         ... 

0000009a <digital_pin_to_timer_PGM>:
  9a:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
  aa:	00 00 00 00                                         ....

000000ae <__ctors_start>:
  ae:	51 04       	cpc	r5, r1

000000b0 <__ctors_end>:
  b0:	11 24       	eor	r1, r1
  b2:	1f be       	out	0x3f, r1	; 63
  b4:	cf ef       	ldi	r28, 0xFF	; 255
  b6:	d8 e0       	ldi	r29, 0x08	; 8
  b8:	de bf       	out	0x3e, r29	; 62
  ba:	cd bf       	out	0x3d, r28	; 61

000000bc <__do_copy_data>:
  bc:	11 e0       	ldi	r17, 0x01	; 1
  be:	a0 e0       	ldi	r26, 0x00	; 0
  c0:	b1 e0       	ldi	r27, 0x01	; 1
  c2:	e0 e3       	ldi	r30, 0x30	; 48
  c4:	fc e0       	ldi	r31, 0x0C	; 12
  c6:	02 c0       	rjmp	.+4      	; 0xcc <__do_copy_data+0x10>
  c8:	05 90       	lpm	r0, Z+
  ca:	0d 92       	st	X+, r0
  cc:	a4 32       	cpi	r26, 0x24	; 36
  ce:	b1 07       	cpc	r27, r17
  d0:	d9 f7       	brne	.-10     	; 0xc8 <__do_copy_data+0xc>

000000d2 <__do_clear_bss>:
  d2:	22 e0       	ldi	r18, 0x02	; 2
  d4:	a4 e2       	ldi	r26, 0x24	; 36
  d6:	b1 e0       	ldi	r27, 0x01	; 1
  d8:	01 c0       	rjmp	.+2      	; 0xdc <.do_clear_bss_start>

000000da <.do_clear_bss_loop>:
  da:	1d 92       	st	X+, r1

000000dc <.do_clear_bss_start>:
  dc:	a7 36       	cpi	r26, 0x67	; 103
  de:	b2 07       	cpc	r27, r18
  e0:	e1 f7       	brne	.-8      	; 0xda <.do_clear_bss_loop>

000000e2 <__do_global_ctors>:
  e2:	10 e0       	ldi	r17, 0x00	; 0
  e4:	c8 e5       	ldi	r28, 0x58	; 88
  e6:	d0 e0       	ldi	r29, 0x00	; 0
  e8:	04 c0       	rjmp	.+8      	; 0xf2 <__do_global_ctors+0x10>
  ea:	21 97       	sbiw	r28, 0x01	; 1
  ec:	fe 01       	movw	r30, r28
  ee:	0e 94 10 06 	call	0xc20	; 0xc20 <__tablejump2__>
  f2:	c7 35       	cpi	r28, 0x57	; 87
  f4:	d1 07       	cpc	r29, r17
  f6:	c9 f7       	brne	.-14     	; 0xea <__do_global_ctors+0x8>
  f8:	0e 94 8a 04 	call	0x914	; 0x914 <main>
  fc:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <_exit>

00000100 <__bad_interrupt>:
 100:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000104 <digitalWrite.constprop.16>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	fc 01       	movw	r30, r24
 108:	e6 56       	subi	r30, 0x66	; 102
 10a:	ff 4f       	sbci	r31, 0xFF	; 255
 10c:	24 91       	lpm	r18, Z
	uint8_t bit = digitalPinToBitMask(pin);
 10e:	fc 01       	movw	r30, r24
 110:	ea 57       	subi	r30, 0x7A	; 122
 112:	ff 4f       	sbci	r31, 0xFF	; 255
 114:	34 91       	lpm	r19, Z
	uint8_t port = digitalPinToPort(pin);
 116:	fc 01       	movw	r30, r24
 118:	ee 58       	subi	r30, 0x8E	; 142
 11a:	ff 4f       	sbci	r31, 0xFF	; 255
 11c:	e4 91       	lpm	r30, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 11e:	ee 23       	and	r30, r30
 120:	b1 f0       	breq	.+44     	; 0x14e <digitalWrite.constprop.16+0x4a>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 122:	22 23       	and	r18, r18
 124:	39 f0       	breq	.+14     	; 0x134 <digitalWrite.constprop.16+0x30>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 126:	23 30       	cpi	r18, 0x03	; 3
 128:	e9 f0       	breq	.+58     	; 0x164 <digitalWrite.constprop.16+0x60>
 12a:	90 f4       	brcc	.+36     	; 0x150 <digitalWrite.constprop.16+0x4c>
 12c:	21 30       	cpi	r18, 0x01	; 1
 12e:	01 f1       	breq	.+64     	; 0x170 <digitalWrite.constprop.16+0x6c>
 130:	22 30       	cpi	r18, 0x02	; 2
 132:	11 f1       	breq	.+68     	; 0x178 <digitalWrite.constprop.16+0x74>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	ee 0f       	add	r30, r30
 138:	ff 1f       	adc	r31, r31
 13a:	e8 59       	subi	r30, 0x98	; 152
 13c:	ff 4f       	sbci	r31, 0xFF	; 255
 13e:	a5 91       	lpm	r26, Z+
 140:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 142:	8f b7       	in	r24, 0x3f	; 63
	cli();
 144:	f8 94       	cli

	if (val == LOW) {
		*out &= ~bit;
	} else {
		*out |= bit;
 146:	ec 91       	ld	r30, X
 148:	3e 2b       	or	r19, r30
 14a:	3c 93       	st	X, r19
	}

	SREG = oldSREG;
 14c:	8f bf       	out	0x3f, r24	; 63
}
 14e:	08 95       	ret
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 150:	27 30       	cpi	r18, 0x07	; 7
 152:	a9 f0       	breq	.+42     	; 0x17e <digitalWrite.constprop.16+0x7a>
 154:	28 30       	cpi	r18, 0x08	; 8
 156:	c9 f0       	breq	.+50     	; 0x18a <digitalWrite.constprop.16+0x86>
 158:	24 30       	cpi	r18, 0x04	; 4
 15a:	61 f7       	brne	.-40     	; 0x134 <digitalWrite.constprop.16+0x30>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 15c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 160:	8f 7d       	andi	r24, 0xDF	; 223
 162:	03 c0       	rjmp	.+6      	; 0x16a <digitalWrite.constprop.16+0x66>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 164:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 168:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 16a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 16e:	e2 cf       	rjmp	.-60     	; 0x134 <digitalWrite.constprop.16+0x30>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 170:	84 b5       	in	r24, 0x24	; 36
 172:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 174:	84 bd       	out	0x24, r24	; 36
 176:	de cf       	rjmp	.-68     	; 0x134 <digitalWrite.constprop.16+0x30>
 178:	84 b5       	in	r24, 0x24	; 36
 17a:	8f 7d       	andi	r24, 0xDF	; 223
 17c:	fb cf       	rjmp	.-10     	; 0x174 <digitalWrite.constprop.16+0x70>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 17e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
 182:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 184:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
 188:	d5 cf       	rjmp	.-86     	; 0x134 <digitalWrite.constprop.16+0x30>
 18a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
 18e:	8f 7d       	andi	r24, 0xDF	; 223
 190:	f9 cf       	rjmp	.-14     	; 0x184 <digitalWrite.constprop.16+0x80>

00000192 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
 192:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <_ZN7TwoWire14rxBufferLengthE>
 196:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <_ZN7TwoWire13rxBufferIndexE>
}
 19a:	89 1b       	sub	r24, r25
 19c:	99 0b       	sbc	r25, r25
 19e:	08 95       	ret

000001a0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 1a0:	af 92       	push	r10
 1a2:	bf 92       	push	r11
 1a4:	cf 92       	push	r12
 1a6:	df 92       	push	r13
 1a8:	ef 92       	push	r14
 1aa:	ff 92       	push	r15
 1ac:	0f 93       	push	r16
 1ae:	1f 93       	push	r17
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	6c 01       	movw	r12, r24
 1b6:	7b 01       	movw	r14, r22
 1b8:	8b 01       	movw	r16, r22
 1ba:	04 0f       	add	r16, r20
 1bc:	15 1f       	adc	r17, r21
 1be:	eb 01       	movw	r28, r22
 1c0:	5e 01       	movw	r10, r28
 1c2:	ae 18       	sub	r10, r14
 1c4:	bf 08       	sbc	r11, r15
  size_t n = 0;
  while (size--) {
 1c6:	c0 17       	cp	r28, r16
 1c8:	d1 07       	cpc	r29, r17
 1ca:	59 f0       	breq	.+22     	; 0x1e2 <_ZN5Print5writeEPKhj+0x42>
    if (write(*buffer++)) n++;
 1cc:	69 91       	ld	r22, Y+
 1ce:	d6 01       	movw	r26, r12
 1d0:	ed 91       	ld	r30, X+
 1d2:	fc 91       	ld	r31, X
 1d4:	01 90       	ld	r0, Z+
 1d6:	f0 81       	ld	r31, Z
 1d8:	e0 2d       	mov	r30, r0
 1da:	c6 01       	movw	r24, r12
 1dc:	09 95       	icall
 1de:	89 2b       	or	r24, r25
 1e0:	79 f7       	brne	.-34     	; 0x1c0 <_ZN5Print5writeEPKhj+0x20>
    else break;
  }
  return n;
}
 1e2:	c5 01       	movw	r24, r10
 1e4:	df 91       	pop	r29
 1e6:	cf 91       	pop	r28
 1e8:	1f 91       	pop	r17
 1ea:	0f 91       	pop	r16
 1ec:	ff 90       	pop	r15
 1ee:	ef 90       	pop	r14
 1f0:	df 90       	pop	r13
 1f2:	cf 90       	pop	r12
 1f4:	bf 90       	pop	r11
 1f6:	af 90       	pop	r10
 1f8:	08 95       	ret

000001fa <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
 1fa:	fc 01       	movw	r30, r24
 1fc:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
 1fe:	44 8d       	ldd	r20, Z+28	; 0x1c
 200:	25 2f       	mov	r18, r21
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	84 2f       	mov	r24, r20
 206:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 208:	82 1b       	sub	r24, r18
 20a:	93 0b       	sbc	r25, r19
 20c:	54 17       	cp	r21, r20
 20e:	10 f0       	brcs	.+4      	; 0x214 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
 210:	cf 96       	adiw	r24, 0x3f	; 63
 212:	08 95       	ret
  return tail - head - 1;
 214:	01 97       	sbiw	r24, 0x01	; 1
}
 216:	08 95       	ret

00000218 <_ZN14HardwareSerial4readEv>:
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{
 218:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 21a:	91 8d       	ldd	r25, Z+25	; 0x19
 21c:	82 8d       	ldd	r24, Z+26	; 0x1a
 21e:	98 17       	cp	r25, r24
 220:	61 f0       	breq	.+24     	; 0x23a <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 222:	a2 8d       	ldd	r26, Z+26	; 0x1a
 224:	ae 0f       	add	r26, r30
 226:	bf 2f       	mov	r27, r31
 228:	b1 1d       	adc	r27, r1
 22a:	5d 96       	adiw	r26, 0x1d	; 29
 22c:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 22e:	92 8d       	ldd	r25, Z+26	; 0x1a
 230:	9f 5f       	subi	r25, 0xFF	; 255
 232:	9f 73       	andi	r25, 0x3F	; 63
 234:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 23a:	8f ef       	ldi	r24, 0xFF	; 255
 23c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 23e:	08 95       	ret

00000240 <_ZN14HardwareSerial4peekEv>:
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
 240:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 242:	91 8d       	ldd	r25, Z+25	; 0x19
 244:	82 8d       	ldd	r24, Z+26	; 0x1a
 246:	98 17       	cp	r25, r24
 248:	31 f0       	breq	.+12     	; 0x256 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 24a:	82 8d       	ldd	r24, Z+26	; 0x1a
 24c:	e8 0f       	add	r30, r24
 24e:	f1 1d       	adc	r31, r1
 250:	85 8d       	ldd	r24, Z+29	; 0x1d
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 256:	8f ef       	ldi	r24, 0xFF	; 255
 258:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 25a:	08 95       	ret

0000025c <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 25c:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 25e:	91 8d       	ldd	r25, Z+25	; 0x19
 260:	22 8d       	ldd	r18, Z+26	; 0x1a
 262:	89 2f       	mov	r24, r25
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	80 5c       	subi	r24, 0xC0	; 192
 268:	9f 4f       	sbci	r25, 0xFF	; 255
 26a:	82 1b       	sub	r24, r18
 26c:	91 09       	sbc	r25, r1
}
 26e:	8f 73       	andi	r24, 0x3F	; 63
 270:	99 27       	eor	r25, r25
 272:	08 95       	ret

00000274 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 274:	8e eb       	ldi	r24, 0xBE	; 190
 276:	91 e0       	ldi	r25, 0x01	; 1
 278:	0e 94 2e 01 	call	0x25c	; 0x25c <_ZN14HardwareSerial9availableEv>
 27c:	21 e0       	ldi	r18, 0x01	; 1
 27e:	89 2b       	or	r24, r25
 280:	09 f4       	brne	.+2      	; 0x284 <_Z17Serial0_availablev+0x10>
 282:	20 e0       	ldi	r18, 0x00	; 0
}
 284:	82 2f       	mov	r24, r18
 286:	08 95       	ret

00000288 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	89 2b       	or	r24, r25
 28e:	29 f0       	breq	.+10     	; 0x29a <_Z14serialEventRunv+0x12>
 290:	0e 94 3a 01 	call	0x274	; 0x274 <_Z17Serial0_availablev>
 294:	81 11       	cpse	r24, r1
 296:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
 29a:	08 95       	ret

0000029c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 29c:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 29e:	a4 8d       	ldd	r26, Z+28	; 0x1c
 2a0:	a8 0f       	add	r26, r24
 2a2:	b9 2f       	mov	r27, r25
 2a4:	b1 1d       	adc	r27, r1
 2a6:	a3 5a       	subi	r26, 0xA3	; 163
 2a8:	bf 4f       	sbci	r27, 0xFF	; 255
 2aa:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 2ac:	84 8d       	ldd	r24, Z+28	; 0x1c
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	01 96       	adiw	r24, 0x01	; 1
 2b2:	8f 73       	andi	r24, 0x3F	; 63
 2b4:	99 27       	eor	r25, r25
 2b6:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 2b8:	a6 89       	ldd	r26, Z+22	; 0x16
 2ba:	b7 89       	ldd	r27, Z+23	; 0x17
 2bc:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
 2be:	a0 89       	ldd	r26, Z+16	; 0x10
 2c0:	b1 89       	ldd	r27, Z+17	; 0x11
 2c2:	8c 91       	ld	r24, X
 2c4:	83 70       	andi	r24, 0x03	; 3
 2c6:	80 64       	ori	r24, 0x40	; 64
 2c8:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
 2ca:	93 8d       	ldd	r25, Z+27	; 0x1b
 2cc:	84 8d       	ldd	r24, Z+28	; 0x1c
 2ce:	98 13       	cpse	r25, r24
 2d0:	06 c0       	rjmp	.+12     	; 0x2de <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 2d2:	02 88       	ldd	r0, Z+18	; 0x12
 2d4:	f3 89       	ldd	r31, Z+19	; 0x13
 2d6:	e0 2d       	mov	r30, r0
 2d8:	80 81       	ld	r24, Z
 2da:	8f 7d       	andi	r24, 0xDF	; 223
 2dc:	80 83       	st	Z, r24
  }
}
 2de:	08 95       	ret

000002e0 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
 2e0:	ef 92       	push	r14
 2e2:	ff 92       	push	r15
 2e4:	0f 93       	push	r16
 2e6:	1f 93       	push	r17
 2e8:	cf 93       	push	r28
 2ea:	df 93       	push	r29
 2ec:	ec 01       	movw	r28, r24
  _written = true;
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 2f2:	9b 8d       	ldd	r25, Y+27	; 0x1b
 2f4:	8c 8d       	ldd	r24, Y+28	; 0x1c
 2f6:	98 13       	cpse	r25, r24
 2f8:	1a c0       	rjmp	.+52     	; 0x32e <_ZN14HardwareSerial5writeEh+0x4e>
 2fa:	e8 89       	ldd	r30, Y+16	; 0x10
 2fc:	f9 89       	ldd	r31, Y+17	; 0x11
 2fe:	80 81       	ld	r24, Z
 300:	85 ff       	sbrs	r24, 5
 302:	15 c0       	rjmp	.+42     	; 0x32e <_ZN14HardwareSerial5writeEh+0x4e>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 304:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 306:	f8 94       	cli
      *_udr = c;
 308:	ee 89       	ldd	r30, Y+22	; 0x16
 30a:	ff 89       	ldd	r31, Y+23	; 0x17
 30c:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
 30e:	e8 89       	ldd	r30, Y+16	; 0x10
 310:	f9 89       	ldd	r31, Y+17	; 0x11
 312:	80 81       	ld	r24, Z
 314:	83 70       	andi	r24, 0x03	; 3
 316:	80 64       	ori	r24, 0x40	; 64
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
 318:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 31a:	9f bf       	out	0x3f, r25	; 63
  }
  
  return 1;
}
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	df 91       	pop	r29
 322:	cf 91       	pop	r28
 324:	1f 91       	pop	r17
 326:	0f 91       	pop	r16
 328:	ff 90       	pop	r15
 32a:	ef 90       	pop	r14
 32c:	08 95       	ret
 32e:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 330:	0b 8d       	ldd	r16, Y+27	; 0x1b
 332:	10 e0       	ldi	r17, 0x00	; 0
 334:	0f 5f       	subi	r16, 0xFF	; 255
 336:	1f 4f       	sbci	r17, 0xFF	; 255
 338:	0f 73       	andi	r16, 0x3F	; 63
 33a:	11 27       	eor	r17, r17
 33c:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 33e:	8c 8d       	ldd	r24, Y+28	; 0x1c
 340:	8e 11       	cpse	r24, r14
 342:	0c c0       	rjmp	.+24     	; 0x35c <_ZN14HardwareSerial5writeEh+0x7c>
    if (bit_is_clear(SREG, SREG_I)) {
 344:	0f b6       	in	r0, 0x3f	; 63
 346:	07 fc       	sbrc	r0, 7
 348:	fa cf       	rjmp	.-12     	; 0x33e <_ZN14HardwareSerial5writeEh+0x5e>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 34a:	e8 89       	ldd	r30, Y+16	; 0x10
 34c:	f9 89       	ldd	r31, Y+17	; 0x11
 34e:	80 81       	ld	r24, Z
 350:	85 ff       	sbrs	r24, 5
 352:	f5 cf       	rjmp	.-22     	; 0x33e <_ZN14HardwareSerial5writeEh+0x5e>
	_tx_udr_empty_irq();
 354:	ce 01       	movw	r24, r28
 356:	0e 94 4e 01 	call	0x29c	; 0x29c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 35a:	f1 cf       	rjmp	.-30     	; 0x33e <_ZN14HardwareSerial5writeEh+0x5e>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 35c:	eb 8d       	ldd	r30, Y+27	; 0x1b
 35e:	ec 0f       	add	r30, r28
 360:	fd 2f       	mov	r31, r29
 362:	f1 1d       	adc	r31, r1
 364:	e3 5a       	subi	r30, 0xA3	; 163
 366:	ff 4f       	sbci	r31, 0xFF	; 255
 368:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 36a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 36c:	f8 94       	cli
    _tx_buffer_head = i;
 36e:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
 370:	ea 89       	ldd	r30, Y+18	; 0x12
 372:	fb 89       	ldd	r31, Y+19	; 0x13
 374:	80 81       	ld	r24, Z
 376:	80 62       	ori	r24, 0x20	; 32
 378:	cf cf       	rjmp	.-98     	; 0x318 <_ZN14HardwareSerial5writeEh+0x38>

0000037a <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 37a:	cf 93       	push	r28
 37c:	df 93       	push	r29
 37e:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 380:	88 8d       	ldd	r24, Y+24	; 0x18
 382:	88 23       	and	r24, r24
 384:	b9 f0       	breq	.+46     	; 0x3b4 <_ZN14HardwareSerial5flushEv+0x3a>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 386:	aa 89       	ldd	r26, Y+18	; 0x12
 388:	bb 89       	ldd	r27, Y+19	; 0x13
 38a:	e8 89       	ldd	r30, Y+16	; 0x10
 38c:	f9 89       	ldd	r31, Y+17	; 0x11
 38e:	8c 91       	ld	r24, X
 390:	85 fd       	sbrc	r24, 5
 392:	03 c0       	rjmp	.+6      	; 0x39a <_ZN14HardwareSerial5flushEv+0x20>
 394:	80 81       	ld	r24, Z
 396:	86 fd       	sbrc	r24, 6
 398:	0d c0       	rjmp	.+26     	; 0x3b4 <_ZN14HardwareSerial5flushEv+0x3a>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 39a:	0f b6       	in	r0, 0x3f	; 63
 39c:	07 fc       	sbrc	r0, 7
 39e:	f7 cf       	rjmp	.-18     	; 0x38e <_ZN14HardwareSerial5flushEv+0x14>
 3a0:	8c 91       	ld	r24, X
 3a2:	85 ff       	sbrs	r24, 5
 3a4:	f2 cf       	rjmp	.-28     	; 0x38a <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 3a6:	80 81       	ld	r24, Z
 3a8:	85 ff       	sbrs	r24, 5
 3aa:	ed cf       	rjmp	.-38     	; 0x386 <_ZN14HardwareSerial5flushEv+0xc>
	  _tx_udr_empty_irq();
 3ac:	ce 01       	movw	r24, r28
 3ae:	0e 94 4e 01 	call	0x29c	; 0x29c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 3b2:	e9 cf       	rjmp	.-46     	; 0x386 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 3b4:	df 91       	pop	r29
 3b6:	cf 91       	pop	r28
 3b8:	08 95       	ret

000003ba <micros>:
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 3ba:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
 3bc:	f8 94       	cli
	m = timer0_overflow_count;
 3be:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <timer0_overflow_count>
 3c2:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <timer0_overflow_count+0x1>
 3c6:	a0 91 6e 01 	lds	r26, 0x016E	; 0x80016e <timer0_overflow_count+0x2>
 3ca:	b0 91 6f 01 	lds	r27, 0x016F	; 0x80016f <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
 3ce:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 3d0:	a8 9b       	sbis	0x15, 0	; 21
 3d2:	05 c0       	rjmp	.+10     	; 0x3de <micros+0x24>
 3d4:	2f 3f       	cpi	r18, 0xFF	; 255
 3d6:	19 f0       	breq	.+6      	; 0x3de <micros+0x24>
		m++;
 3d8:	01 96       	adiw	r24, 0x01	; 1
 3da:	a1 1d       	adc	r26, r1
 3dc:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 3de:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
 3e0:	ba 2f       	mov	r27, r26
 3e2:	a9 2f       	mov	r26, r25
 3e4:	98 2f       	mov	r25, r24
 3e6:	88 27       	eor	r24, r24
 3e8:	bc 01       	movw	r22, r24
 3ea:	cd 01       	movw	r24, r26
 3ec:	62 0f       	add	r22, r18
 3ee:	71 1d       	adc	r23, r1
 3f0:	81 1d       	adc	r24, r1
 3f2:	91 1d       	adc	r25, r1
 3f4:	42 e0       	ldi	r20, 0x02	; 2
 3f6:	66 0f       	add	r22, r22
 3f8:	77 1f       	adc	r23, r23
 3fa:	88 1f       	adc	r24, r24
 3fc:	99 1f       	adc	r25, r25
 3fe:	4a 95       	dec	r20
 400:	d1 f7       	brne	.-12     	; 0x3f6 <micros+0x3c>
}
 402:	08 95       	ret

00000404 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
 404:	85 ed       	ldi	r24, 0xD5	; 213
 406:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
  // TWINT is not set after a stop condition!
  /*while(TWCR & _BV(TWSTO)){
    continue;
  }*/
  
  counter_1 =0x86;  //timeout 1 sec - 16 MHz
 40a:	86 e8       	ldi	r24, 0x86	; 134
 40c:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <counter_1>
  counter_2 =0x46;
 410:	86 e4       	ldi	r24, 0x46	; 70
 412:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <counter_2>
  counter_3 =0x02;
 416:	82 e0       	ldi	r24, 0x02	; 2
 418:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <counter_3>
check:                                        
  if (TWI_READY == twi_state) goto go;
 41c:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <twi_state>
 420:	88 23       	and	r24, r24
 422:	b1 f0       	breq	.+44     	; 0x450 <twi_stop+0x4c>
  if ( -- counter_1 ) goto check;
 424:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <counter_1>
 428:	81 50       	subi	r24, 0x01	; 1
 42a:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <counter_1>
 42e:	81 11       	cpse	r24, r1
 430:	f5 cf       	rjmp	.-22     	; 0x41c <twi_stop+0x18>
  if ( -- counter_2 ) goto check;
 432:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <counter_2>
 436:	81 50       	subi	r24, 0x01	; 1
 438:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <counter_2>
 43c:	81 11       	cpse	r24, r1
 43e:	ee cf       	rjmp	.-36     	; 0x41c <twi_stop+0x18>
  if ( -- counter_3 ) goto check;
 440:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <counter_3>
 444:	81 50       	subi	r24, 0x01	; 1
 446:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <counter_3>
 44a:	81 11       	cpse	r24, r1
 44c:	e7 cf       	rjmp	.-50     	; 0x41c <twi_stop+0x18>
 44e:	08 95       	ret
  return;
go:
  // update twi state
  twi_state = TWI_READY;
 450:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <twi_state>
}
 454:	08 95       	ret

00000456 <twi_transmit>:
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < (twi_txBufferLength+length)){
 456:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <twi_txBufferLength>
 45a:	26 0f       	add	r18, r22
 45c:	33 27       	eor	r19, r19
 45e:	33 1f       	adc	r19, r19
 460:	21 32       	cpi	r18, 0x21	; 33
 462:	31 05       	cpc	r19, r1
 464:	ec f4       	brge	.+58     	; 0x4a0 <twi_transmit+0x4a>
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
 466:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <twi_state>
 46a:	fc 01       	movw	r30, r24
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	80 e0       	ldi	r24, 0x00	; 0
 470:	24 30       	cpi	r18, 0x04	; 4
 472:	69 f0       	breq	.+26     	; 0x48e <twi_transmit+0x38>
    return 2;
 474:	82 e0       	ldi	r24, 0x02	; 2
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
  
  return 0;
}
 476:	08 95       	ret
    return 2;
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    twi_txBuffer[twi_txBufferLength+i] = data[i];
 478:	a0 91 44 01 	lds	r26, 0x0144	; 0x800144 <twi_txBufferLength>
 47c:	21 91       	ld	r18, Z+
 47e:	ac 01       	movw	r20, r24
 480:	4c 5d       	subi	r20, 0xDC	; 220
 482:	5e 4f       	sbci	r21, 0xFE	; 254
 484:	a4 0f       	add	r26, r20
 486:	b5 2f       	mov	r27, r21
 488:	b1 1d       	adc	r27, r1
 48a:	2c 93       	st	X, r18
 48c:	01 96       	adiw	r24, 0x01	; 1
  if(TWI_STX != twi_state){
    return 2;
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
 48e:	86 17       	cp	r24, r22
 490:	98 f3       	brcs	.-26     	; 0x478 <twi_transmit+0x22>
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
 492:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <twi_txBufferLength>
 496:	68 0f       	add	r22, r24
 498:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <twi_txBufferLength>
 49c:	80 e0       	ldi	r24, 0x00	; 0
 49e:	08 95       	ret
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < (twi_txBufferLength+length)){
    return 1;
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	08 95       	ret

000004a4 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
 4a4:	08 95       	ret

000004a6 <_ZN7TwoWire4peekEv>:
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
  
  if(rxBufferIndex < rxBufferLength){
 4a6:	e0 91 bc 01 	lds	r30, 0x01BC	; 0x8001bc <_ZN7TwoWire13rxBufferIndexE>
 4aa:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <_ZN7TwoWire14rxBufferLengthE>
 4ae:	e8 17       	cp	r30, r24
 4b0:	30 f4       	brcc	.+12     	; 0x4be <_ZN7TwoWire4peekEv+0x18>
    value = rxBuffer[rxBufferIndex];
 4b2:	f0 e0       	ldi	r31, 0x00	; 0
 4b4:	e4 56       	subi	r30, 0x64	; 100
 4b6:	fe 4f       	sbci	r31, 0xFE	; 254
 4b8:	80 81       	ld	r24, Z
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	08 95       	ret
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
 4be:	8f ef       	ldi	r24, 0xFF	; 255
 4c0:	9f ef       	ldi	r25, 0xFF	; 255
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
 4c2:	08 95       	ret

000004c4 <_ZN7TwoWire4readEv>:
int TwoWire::read(void)
{
  int value = -1;
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
 4c4:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <_ZN7TwoWire13rxBufferIndexE>
 4c8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <_ZN7TwoWire14rxBufferLengthE>
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
 4cc:	2f ef       	ldi	r18, 0xFF	; 255
 4ce:	3f ef       	ldi	r19, 0xFF	; 255
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
 4d0:	98 17       	cp	r25, r24
 4d2:	48 f4       	brcc	.+18     	; 0x4e6 <_ZN7TwoWire4readEv+0x22>
    value = rxBuffer[rxBufferIndex];
 4d4:	e9 2f       	mov	r30, r25
 4d6:	f0 e0       	ldi	r31, 0x00	; 0
 4d8:	e4 56       	subi	r30, 0x64	; 100
 4da:	fe 4f       	sbci	r31, 0xFE	; 254
 4dc:	20 81       	ld	r18, Z
 4de:	30 e0       	ldi	r19, 0x00	; 0
    ++rxBufferIndex;
 4e0:	9f 5f       	subi	r25, 0xFF	; 255
 4e2:	90 93 bc 01 	sts	0x01BC, r25	; 0x8001bc <_ZN7TwoWire13rxBufferIndexE>
  }

  return value;
}
 4e6:	c9 01       	movw	r24, r18
 4e8:	08 95       	ret

000004ea <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 4ea:	cf 93       	push	r28
 4ec:	df 93       	push	r29
 4ee:	cb 01       	movw	r24, r22
 4f0:	ea 01       	movw	r28, r20
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
 4f2:	64 2f       	mov	r22, r20
 4f4:	0e 94 2b 02 	call	0x456	; 0x456 <twi_transmit>
  }
  return quantity;
}
 4f8:	ce 01       	movw	r24, r28
 4fa:	df 91       	pop	r29
 4fc:	cf 91       	pop	r28
 4fe:	08 95       	ret

00000500 <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
 500:	cf 93       	push	r28
 502:	df 93       	push	r29
 504:	1f 92       	push	r1
 506:	cd b7       	in	r28, 0x3d	; 61
 508:	de b7       	in	r29, 0x3e	; 62
 50a:	69 83       	std	Y+1, r22	; 0x01
    // update amount in buffer   
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
 50c:	61 e0       	ldi	r22, 0x01	; 1
 50e:	ce 01       	movw	r24, r28
 510:	01 96       	adiw	r24, 0x01	; 1
 512:	0e 94 2b 02 	call	0x456	; 0x456 <twi_transmit>
  }
  return 1;
}
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	0f 90       	pop	r0
 51c:	df 91       	pop	r29
 51e:	cf 91       	pop	r28
 520:	08 95       	ret

00000522 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	80 e0       	ldi	r24, 0x00	; 0
 526:	08 95       	ret

00000528 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 528:	1f 92       	push	r1
 52a:	0f 92       	push	r0
 52c:	0f b6       	in	r0, 0x3f	; 63
 52e:	0f 92       	push	r0
 530:	11 24       	eor	r1, r1
 532:	2f 93       	push	r18
 534:	3f 93       	push	r19
 536:	4f 93       	push	r20
 538:	5f 93       	push	r21
 53a:	6f 93       	push	r22
 53c:	7f 93       	push	r23
 53e:	8f 93       	push	r24
 540:	9f 93       	push	r25
 542:	af 93       	push	r26
 544:	bf 93       	push	r27
 546:	ef 93       	push	r30
 548:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 54a:	8e eb       	ldi	r24, 0xBE	; 190
 54c:	91 e0       	ldi	r25, 0x01	; 1
 54e:	0e 94 4e 01 	call	0x29c	; 0x29c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 552:	ff 91       	pop	r31
 554:	ef 91       	pop	r30
 556:	bf 91       	pop	r27
 558:	af 91       	pop	r26
 55a:	9f 91       	pop	r25
 55c:	8f 91       	pop	r24
 55e:	7f 91       	pop	r23
 560:	6f 91       	pop	r22
 562:	5f 91       	pop	r21
 564:	4f 91       	pop	r20
 566:	3f 91       	pop	r19
 568:	2f 91       	pop	r18
 56a:	0f 90       	pop	r0
 56c:	0f be       	out	0x3f, r0	; 63
 56e:	0f 90       	pop	r0
 570:	1f 90       	pop	r1
 572:	18 95       	reti

00000574 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 574:	1f 92       	push	r1
 576:	0f 92       	push	r0
 578:	0f b6       	in	r0, 0x3f	; 63
 57a:	0f 92       	push	r0
 57c:	11 24       	eor	r1, r1
 57e:	2f 93       	push	r18
 580:	8f 93       	push	r24
 582:	9f 93       	push	r25
 584:	ef 93       	push	r30
 586:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 588:	e0 91 ce 01 	lds	r30, 0x01CE	; 0x8001ce <Serial+0x10>
 58c:	f0 91 cf 01 	lds	r31, 0x01CF	; 0x8001cf <Serial+0x11>
 590:	80 81       	ld	r24, Z
 592:	e0 91 d4 01 	lds	r30, 0x01D4	; 0x8001d4 <Serial+0x16>
 596:	f0 91 d5 01 	lds	r31, 0x01D5	; 0x8001d5 <Serial+0x17>
 59a:	82 fd       	sbrc	r24, 2
 59c:	1b c0       	rjmp	.+54     	; 0x5d4 <__vector_18+0x60>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 59e:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 5a0:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <Serial+0x19>
 5a4:	8f 5f       	subi	r24, 0xFF	; 255
 5a6:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 5a8:	20 91 d8 01 	lds	r18, 0x01D8	; 0x8001d8 <Serial+0x1a>
 5ac:	82 17       	cp	r24, r18
 5ae:	41 f0       	breq	.+16     	; 0x5c0 <__vector_18+0x4c>
      _rx_buffer[_rx_buffer_head] = c;
 5b0:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <Serial+0x19>
 5b4:	f0 e0       	ldi	r31, 0x00	; 0
 5b6:	e2 54       	subi	r30, 0x42	; 66
 5b8:	fe 4f       	sbci	r31, 0xFE	; 254
 5ba:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 5bc:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <Serial+0x19>
    Serial._rx_complete_irq();
  }
 5c0:	ff 91       	pop	r31
 5c2:	ef 91       	pop	r30
 5c4:	9f 91       	pop	r25
 5c6:	8f 91       	pop	r24
 5c8:	2f 91       	pop	r18
 5ca:	0f 90       	pop	r0
 5cc:	0f be       	out	0x3f, r0	; 63
 5ce:	0f 90       	pop	r0
 5d0:	1f 90       	pop	r1
 5d2:	18 95       	reti
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 5d4:	80 81       	ld	r24, Z
 5d6:	f4 cf       	rjmp	.-24     	; 0x5c0 <__vector_18+0x4c>

000005d8 <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
 5d8:	1f 92       	push	r1
 5da:	0f 92       	push	r0
 5dc:	0f b6       	in	r0, 0x3f	; 63
 5de:	0f 92       	push	r0
 5e0:	11 24       	eor	r1, r1
 5e2:	2f 93       	push	r18
 5e4:	3f 93       	push	r19
 5e6:	8f 93       	push	r24
 5e8:	9f 93       	push	r25
 5ea:	af 93       	push	r26
 5ec:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 5ee:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <timer0_millis>
 5f2:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <timer0_millis+0x1>
 5f6:	a0 91 6a 01 	lds	r26, 0x016A	; 0x80016a <timer0_millis+0x2>
 5fa:	b0 91 6b 01 	lds	r27, 0x016B	; 0x80016b <timer0_millis+0x3>
	unsigned char f = timer0_fract;
 5fe:	30 91 67 01 	lds	r19, 0x0167	; 0x800167 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
 602:	23 e0       	ldi	r18, 0x03	; 3
 604:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
 606:	2d 37       	cpi	r18, 0x7D	; 125
 608:	58 f5       	brcc	.+86     	; 0x660 <__vector_16+0x88>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
 60a:	01 96       	adiw	r24, 0x01	; 1
 60c:	a1 1d       	adc	r26, r1
 60e:	b1 1d       	adc	r27, r1
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
		m += 1;
	}

	timer0_fract = f;
 610:	20 93 67 01 	sts	0x0167, r18	; 0x800167 <timer0_fract>
	timer0_millis = m;
 614:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <timer0_millis>
 618:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <timer0_millis+0x1>
 61c:	a0 93 6a 01 	sts	0x016A, r26	; 0x80016a <timer0_millis+0x2>
 620:	b0 93 6b 01 	sts	0x016B, r27	; 0x80016b <timer0_millis+0x3>
	timer0_overflow_count++;
 624:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <timer0_overflow_count>
 628:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <timer0_overflow_count+0x1>
 62c:	a0 91 6e 01 	lds	r26, 0x016E	; 0x80016e <timer0_overflow_count+0x2>
 630:	b0 91 6f 01 	lds	r27, 0x016F	; 0x80016f <timer0_overflow_count+0x3>
 634:	01 96       	adiw	r24, 0x01	; 1
 636:	a1 1d       	adc	r26, r1
 638:	b1 1d       	adc	r27, r1
 63a:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <timer0_overflow_count>
 63e:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <timer0_overflow_count+0x1>
 642:	a0 93 6e 01 	sts	0x016E, r26	; 0x80016e <timer0_overflow_count+0x2>
 646:	b0 93 6f 01 	sts	0x016F, r27	; 0x80016f <timer0_overflow_count+0x3>
}
 64a:	bf 91       	pop	r27
 64c:	af 91       	pop	r26
 64e:	9f 91       	pop	r25
 650:	8f 91       	pop	r24
 652:	3f 91       	pop	r19
 654:	2f 91       	pop	r18
 656:	0f 90       	pop	r0
 658:	0f be       	out	0x3f, r0	; 63
 65a:	0f 90       	pop	r0
 65c:	1f 90       	pop	r1
 65e:	18 95       	reti
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
 660:	26 e8       	ldi	r18, 0x86	; 134
 662:	23 0f       	add	r18, r19
		m += 1;
 664:	02 96       	adiw	r24, 0x02	; 2
 666:	a1 1d       	adc	r26, r1
 668:	b1 1d       	adc	r27, r1
 66a:	d2 cf       	rjmp	.-92     	; 0x610 <__vector_16+0x38>

0000066c <__vector_24>:
  // update twi state
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
 66c:	1f 92       	push	r1
 66e:	0f 92       	push	r0
 670:	0f b6       	in	r0, 0x3f	; 63
 672:	0f 92       	push	r0
 674:	11 24       	eor	r1, r1
 676:	2f 93       	push	r18
 678:	3f 93       	push	r19
 67a:	4f 93       	push	r20
 67c:	5f 93       	push	r21
 67e:	6f 93       	push	r22
 680:	7f 93       	push	r23
 682:	8f 93       	push	r24
 684:	9f 93       	push	r25
 686:	af 93       	push	r26
 688:	bf 93       	push	r27
 68a:	ef 93       	push	r30
 68c:	ff 93       	push	r31
  switch(TW_STATUS){
 68e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 692:	88 7f       	andi	r24, 0xF8	; 248
 694:	80 36       	cpi	r24, 0x60	; 96
 696:	09 f4       	brne	.+2      	; 0x69a <__vector_24+0x2e>
 698:	4a c0       	rjmp	.+148    	; 0x72e <__vector_24+0xc2>
 69a:	f0 f5       	brcc	.+124    	; 0x718 <__vector_24+0xac>
 69c:	88 32       	cpi	r24, 0x28	; 40
 69e:	09 f4       	brne	.+2      	; 0x6a2 <__vector_24+0x36>
 6a0:	a5 c0       	rjmp	.+330    	; 0x7ec <__vector_24+0x180>
 6a2:	18 f5       	brcc	.+70     	; 0x6ea <__vector_24+0x7e>
 6a4:	80 31       	cpi	r24, 0x10	; 16
 6a6:	09 f4       	brne	.+2      	; 0x6aa <__vector_24+0x3e>
 6a8:	99 c0       	rjmp	.+306    	; 0x7dc <__vector_24+0x170>
 6aa:	b8 f4       	brcc	.+46     	; 0x6da <__vector_24+0x6e>
 6ac:	88 23       	and	r24, r24
 6ae:	09 f4       	brne	.+2      	; 0x6b2 <__vector_24+0x46>
 6b0:	f5 c0       	rjmp	.+490    	; 0x89c <__vector_24+0x230>
 6b2:	88 30       	cpi	r24, 0x08	; 8
 6b4:	09 f4       	brne	.+2      	; 0x6b8 <__vector_24+0x4c>
 6b6:	92 c0       	rjmp	.+292    	; 0x7dc <__vector_24+0x170>
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
 6b8:	ff 91       	pop	r31
 6ba:	ef 91       	pop	r30
 6bc:	bf 91       	pop	r27
 6be:	af 91       	pop	r26
 6c0:	9f 91       	pop	r25
 6c2:	8f 91       	pop	r24
 6c4:	7f 91       	pop	r23
 6c6:	6f 91       	pop	r22
 6c8:	5f 91       	pop	r21
 6ca:	4f 91       	pop	r20
 6cc:	3f 91       	pop	r19
 6ce:	2f 91       	pop	r18
 6d0:	0f 90       	pop	r0
 6d2:	0f be       	out	0x3f, r0	; 63
 6d4:	0f 90       	pop	r0
 6d6:	1f 90       	pop	r1
 6d8:	18 95       	reti
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
 6da:	88 31       	cpi	r24, 0x18	; 24
 6dc:	09 f4       	brne	.+2      	; 0x6e0 <__vector_24+0x74>
 6de:	86 c0       	rjmp	.+268    	; 0x7ec <__vector_24+0x180>
 6e0:	80 32       	cpi	r24, 0x20	; 32
 6e2:	51 f7       	brne	.-44     	; 0x6b8 <__vector_24+0x4c>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
 6e4:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <twi_error>
 6e8:	14 c0       	rjmp	.+40     	; 0x712 <__vector_24+0xa6>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
 6ea:	80 34       	cpi	r24, 0x40	; 64
 6ec:	09 f4       	brne	.+2      	; 0x6f0 <__vector_24+0x84>
 6ee:	9b c0       	rjmp	.+310    	; 0x826 <__vector_24+0x1ba>
 6f0:	40 f4       	brcc	.+16     	; 0x702 <__vector_24+0x96>
 6f2:	80 33       	cpi	r24, 0x30	; 48
 6f4:	b9 f3       	breq	.-18     	; 0x6e4 <__vector_24+0x78>
 6f6:	88 33       	cpi	r24, 0x38	; 56
 6f8:	f9 f6       	brne	.-66     	; 0x6b8 <__vector_24+0x4c>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
 6fa:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <twi_error>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
 6fe:	85 ec       	ldi	r24, 0xC5	; 197
 700:	ae c0       	rjmp	.+348    	; 0x85e <__vector_24+0x1f2>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
 702:	80 35       	cpi	r24, 0x50	; 80
 704:	09 f4       	brne	.+2      	; 0x708 <__vector_24+0x9c>
 706:	83 c0       	rjmp	.+262    	; 0x80e <__vector_24+0x1a2>
 708:	88 35       	cpi	r24, 0x58	; 88
 70a:	09 f4       	brne	.+2      	; 0x70e <__vector_24+0xa2>
 70c:	94 c0       	rjmp	.+296    	; 0x836 <__vector_24+0x1ca>
 70e:	88 34       	cpi	r24, 0x48	; 72
 710:	99 f6       	brne	.-90     	; 0x6b8 <__vector_24+0x4c>
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
 712:	0e 94 02 02 	call	0x404	; 0x404 <twi_stop>
 716:	d0 cf       	rjmp	.-96     	; 0x6b8 <__vector_24+0x4c>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
 718:	88 39       	cpi	r24, 0x98	; 152
 71a:	09 f4       	brne	.+2      	; 0x71e <__vector_24+0xb2>
 71c:	8a c0       	rjmp	.+276    	; 0x832 <__vector_24+0x1c6>
 71e:	38 f5       	brcc	.+78     	; 0x76e <__vector_24+0x102>
 720:	88 37       	cpi	r24, 0x78	; 120
 722:	29 f0       	breq	.+10     	; 0x72e <__vector_24+0xc2>
 724:	50 f4       	brcc	.+20     	; 0x73a <__vector_24+0xce>
 726:	88 36       	cpi	r24, 0x68	; 104
 728:	11 f0       	breq	.+4      	; 0x72e <__vector_24+0xc2>
 72a:	80 37       	cpi	r24, 0x70	; 112
 72c:	29 f6       	brne	.-118    	; 0x6b8 <__vector_24+0x4c>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
 72e:	83 e0       	ldi	r24, 0x03	; 3
 730:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
 734:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <twi_rxBufferIndex>
 738:	55 c0       	rjmp	.+170    	; 0x7e4 <__vector_24+0x178>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
 73a:	88 38       	cpi	r24, 0x88	; 136
 73c:	09 f4       	brne	.+2      	; 0x740 <__vector_24+0xd4>
 73e:	79 c0       	rjmp	.+242    	; 0x832 <__vector_24+0x1c6>
 740:	80 39       	cpi	r24, 0x90	; 144
 742:	19 f0       	breq	.+6      	; 0x74a <__vector_24+0xde>
 744:	80 38       	cpi	r24, 0x80	; 128
 746:	09 f0       	breq	.+2      	; 0x74a <__vector_24+0xde>
 748:	b7 cf       	rjmp	.-146    	; 0x6b8 <__vector_24+0x4c>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
 74a:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <twi_rxBufferIndex>
 74e:	80 32       	cpi	r24, 0x20	; 32
 750:	08 f0       	brcs	.+2      	; 0x754 <__vector_24+0xe8>
 752:	6f c0       	rjmp	.+222    	; 0x832 <__vector_24+0x1c6>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
 754:	e0 91 66 01 	lds	r30, 0x0166	; 0x800166 <twi_rxBufferIndex>
 758:	81 e0       	ldi	r24, 0x01	; 1
 75a:	8e 0f       	add	r24, r30
 75c:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <twi_rxBufferIndex>
 760:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 764:	f0 e0       	ldi	r31, 0x00	; 0
 766:	ea 5b       	subi	r30, 0xBA	; 186
 768:	fe 4f       	sbci	r31, 0xFE	; 254
 76a:	80 83       	st	Z, r24
 76c:	3b c0       	rjmp	.+118    	; 0x7e4 <__vector_24+0x178>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
 76e:	80 3b       	cpi	r24, 0xB0	; 176
 770:	39 f0       	breq	.+14     	; 0x780 <__vector_24+0x114>
 772:	d0 f4       	brcc	.+52     	; 0x7a8 <__vector_24+0x13c>
 774:	80 3a       	cpi	r24, 0xA0	; 160
 776:	09 f4       	brne	.+2      	; 0x77a <__vector_24+0x10e>
 778:	77 c0       	rjmp	.+238    	; 0x868 <__vector_24+0x1fc>
 77a:	88 3a       	cpi	r24, 0xA8	; 168
 77c:	09 f0       	breq	.+2      	; 0x780 <__vector_24+0x114>
 77e:	9c cf       	rjmp	.-200    	; 0x6b8 <__vector_24+0x4c>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
 780:	84 e0       	ldi	r24, 0x04	; 4
 782:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
 786:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
 78a:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
 78e:	f0 e0       	ldi	r31, 0x00	; 0
 790:	e0 e0       	ldi	r30, 0x00	; 0
 792:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
 794:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <twi_txBufferLength>
 798:	81 11       	cpse	r24, r1
 79a:	0f c0       	rjmp	.+30     	; 0x7ba <__vector_24+0x14e>
        twi_txBufferLength = 1;
 79c:	81 e0       	ldi	r24, 0x01	; 1
 79e:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
 7a2:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__data_end>
 7a6:	09 c0       	rjmp	.+18     	; 0x7ba <__vector_24+0x14e>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
 7a8:	80 3c       	cpi	r24, 0xC0	; 192
 7aa:	09 f4       	brne	.+2      	; 0x7ae <__vector_24+0x142>
 7ac:	a8 cf       	rjmp	.-176    	; 0x6fe <__vector_24+0x92>
 7ae:	88 3c       	cpi	r24, 0xC8	; 200
 7b0:	09 f4       	brne	.+2      	; 0x7b4 <__vector_24+0x148>
 7b2:	a5 cf       	rjmp	.-182    	; 0x6fe <__vector_24+0x92>
 7b4:	88 3b       	cpi	r24, 0xB8	; 184
 7b6:	09 f0       	breq	.+2      	; 0x7ba <__vector_24+0x14e>
 7b8:	7f cf       	rjmp	.-258    	; 0x6b8 <__vector_24+0x4c>
        twi_txBuffer[0] = 0x00;
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
 7ba:	e0 91 45 01 	lds	r30, 0x0145	; 0x800145 <twi_txBufferIndex>
 7be:	81 e0       	ldi	r24, 0x01	; 1
 7c0:	8e 0f       	add	r24, r30
 7c2:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <twi_txBufferIndex>
 7c6:	f0 e0       	ldi	r31, 0x00	; 0
 7c8:	ec 5d       	subi	r30, 0xDC	; 220
 7ca:	fe 4f       	sbci	r31, 0xFE	; 254
 7cc:	80 81       	ld	r24, Z
 7ce:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
 7d2:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <twi_txBufferIndex>
 7d6:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <twi_txBufferLength>
 7da:	29 c0       	rjmp	.+82     	; 0x82e <__vector_24+0x1c2>
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
 7dc:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <twi_slarw>
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
 7e0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
 7e4:	85 ec       	ldi	r24, 0xC5	; 197
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
 7e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 7ea:	66 cf       	rjmp	.-308    	; 0x6b8 <__vector_24+0x4c>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
 7ec:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <twi_masterBufferIndex>
 7f0:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <twi_masterBufferLength>
 7f4:	98 17       	cp	r25, r24
 7f6:	58 f5       	brcc	.+86     	; 0x84e <__vector_24+0x1e2>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
 7f8:	e0 91 95 01 	lds	r30, 0x0195	; 0x800195 <twi_masterBufferIndex>
 7fc:	81 e0       	ldi	r24, 0x01	; 1
 7fe:	8e 0f       	add	r24, r30
 800:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <twi_masterBufferIndex>
 804:	f0 e0       	ldi	r31, 0x00	; 0
 806:	ee 58       	subi	r30, 0x8E	; 142
 808:	fe 4f       	sbci	r31, 0xFE	; 254
 80a:	80 81       	ld	r24, Z
 80c:	e9 cf       	rjmp	.-46     	; 0x7e0 <__vector_24+0x174>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
 80e:	e0 91 95 01 	lds	r30, 0x0195	; 0x800195 <twi_masterBufferIndex>
 812:	81 e0       	ldi	r24, 0x01	; 1
 814:	8e 0f       	add	r24, r30
 816:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <twi_masterBufferIndex>
 81a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 81e:	f0 e0       	ldi	r31, 0x00	; 0
 820:	ee 58       	subi	r30, 0x8E	; 142
 822:	fe 4f       	sbci	r31, 0xFE	; 254
 824:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
 826:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <twi_masterBufferIndex>
 82a:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <twi_masterBufferLength>
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
 82e:	98 17       	cp	r25, r24
 830:	c8 f2       	brcs	.-78     	; 0x7e4 <__vector_24+0x178>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
 832:	85 e8       	ldi	r24, 0x85	; 133
 834:	d8 cf       	rjmp	.-80     	; 0x7e6 <__vector_24+0x17a>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
 836:	e0 91 95 01 	lds	r30, 0x0195	; 0x800195 <twi_masterBufferIndex>
 83a:	81 e0       	ldi	r24, 0x01	; 1
 83c:	8e 0f       	add	r24, r30
 83e:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <twi_masterBufferIndex>
 842:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 846:	f0 e0       	ldi	r31, 0x00	; 0
 848:	ee 58       	subi	r30, 0x8E	; 142
 84a:	fe 4f       	sbci	r31, 0xFE	; 254
 84c:	80 83       	st	Z, r24
  if (twi_sendStop)
 84e:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <twi_sendStop>
 852:	81 11       	cpse	r24, r1
 854:	5e cf       	rjmp	.-324    	; 0x712 <__vector_24+0xa6>
          twi_stop();
  else {
    twi_inRepStart = true;  // we're gonna send the START
 856:	81 e0       	ldi	r24, 0x01	; 1
 858:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <twi_inRepStart>
    // don't enable the interrupt. We'll generate the start, but we 
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
 85c:	84 ea       	ldi	r24, 0xA4	; 164
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
 85e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
 862:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <twi_state>
 866:	28 cf       	rjmp	.-432    	; 0x6b8 <__vector_24+0x4c>
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
 868:	85 ec       	ldi	r24, 0xC5	; 197
 86a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // update twi state
  twi_state = TWI_READY;
 86e:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <twi_state>
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
 872:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <twi_rxBufferIndex>
 876:	80 32       	cpi	r24, 0x20	; 32
 878:	30 f4       	brcc	.+12     	; 0x886 <__vector_24+0x21a>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
 87a:	e0 91 66 01 	lds	r30, 0x0166	; 0x800166 <twi_rxBufferIndex>
 87e:	f0 e0       	ldi	r31, 0x00	; 0
 880:	ea 5b       	subi	r30, 0xBA	; 186
 882:	fe 4f       	sbci	r31, 0xFE	; 254
 884:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
 886:	60 91 66 01 	lds	r22, 0x0166	; 0x800166 <twi_rxBufferIndex>
 88a:	70 e0       	ldi	r23, 0x00	; 0
 88c:	86 e4       	ldi	r24, 0x46	; 70
 88e:	91 e0       	ldi	r25, 0x01	; 1
 890:	f0 e0       	ldi	r31, 0x00	; 0
 892:	e0 e0       	ldi	r30, 0x00	; 0
 894:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
 896:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <twi_rxBufferIndex>
 89a:	0e cf       	rjmp	.-484    	; 0x6b8 <__vector_24+0x4c>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
 89c:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <twi_error>
 8a0:	38 cf       	rjmp	.-400    	; 0x712 <__vector_24+0xa6>

000008a2 <_GLOBAL__I_65535_0_master_reader.ino.cpp.o.1911>:
 8a2:	ee eb       	ldi	r30, 0xBE	; 190
 8a4:	f1 e0       	ldi	r31, 0x01	; 1
 8a6:	13 82       	std	Z+3, r1	; 0x03
 8a8:	12 82       	std	Z+2, r1	; 0x02
 8aa:	88 ee       	ldi	r24, 0xE8	; 232
 8ac:	93 e0       	ldi	r25, 0x03	; 3
 8ae:	a0 e0       	ldi	r26, 0x00	; 0
 8b0:	b0 e0       	ldi	r27, 0x00	; 0
 8b2:	84 83       	std	Z+4, r24	; 0x04
 8b4:	95 83       	std	Z+5, r25	; 0x05
 8b6:	a6 83       	std	Z+6, r26	; 0x06
 8b8:	b7 83       	std	Z+7, r27	; 0x07
 8ba:	24 e0       	ldi	r18, 0x04	; 4
 8bc:	31 e0       	ldi	r19, 0x01	; 1
 8be:	31 83       	std	Z+1, r19	; 0x01
 8c0:	20 83       	st	Z, r18
 8c2:	25 ec       	ldi	r18, 0xC5	; 197
 8c4:	30 e0       	ldi	r19, 0x00	; 0
 8c6:	35 87       	std	Z+13, r19	; 0x0d
 8c8:	24 87       	std	Z+12, r18	; 0x0c
 8ca:	24 ec       	ldi	r18, 0xC4	; 196
 8cc:	30 e0       	ldi	r19, 0x00	; 0
 8ce:	37 87       	std	Z+15, r19	; 0x0f
 8d0:	26 87       	std	Z+14, r18	; 0x0e
 8d2:	20 ec       	ldi	r18, 0xC0	; 192
 8d4:	30 e0       	ldi	r19, 0x00	; 0
 8d6:	31 8b       	std	Z+17, r19	; 0x11
 8d8:	20 8b       	std	Z+16, r18	; 0x10
 8da:	21 ec       	ldi	r18, 0xC1	; 193
 8dc:	30 e0       	ldi	r19, 0x00	; 0
 8de:	33 8b       	std	Z+19, r19	; 0x13
 8e0:	22 8b       	std	Z+18, r18	; 0x12
 8e2:	22 ec       	ldi	r18, 0xC2	; 194
 8e4:	30 e0       	ldi	r19, 0x00	; 0
 8e6:	35 8b       	std	Z+21, r19	; 0x15
 8e8:	24 8b       	std	Z+20, r18	; 0x14
 8ea:	26 ec       	ldi	r18, 0xC6	; 198
 8ec:	30 e0       	ldi	r19, 0x00	; 0
 8ee:	37 8b       	std	Z+23, r19	; 0x17
 8f0:	26 8b       	std	Z+22, r18	; 0x16
 8f2:	11 8e       	std	Z+25, r1	; 0x19
 8f4:	12 8e       	std	Z+26, r1	; 0x1a
 8f6:	13 8e       	std	Z+27, r1	; 0x1b
 8f8:	14 8e       	std	Z+28, r1	; 0x1c
 8fa:	eb e5       	ldi	r30, 0x5B	; 91
 8fc:	f2 e0       	ldi	r31, 0x02	; 2
 8fe:	13 82       	std	Z+3, r1	; 0x03
 900:	12 82       	std	Z+2, r1	; 0x02
 902:	84 83       	std	Z+4, r24	; 0x04
 904:	95 83       	std	Z+5, r25	; 0x05
 906:	a6 83       	std	Z+6, r26	; 0x06
 908:	b7 83       	std	Z+7, r27	; 0x07
 90a:	86 e1       	ldi	r24, 0x16	; 22
 90c:	91 e0       	ldi	r25, 0x01	; 1
 90e:	91 83       	std	Z+1, r25	; 0x01
 910:	80 83       	st	Z, r24
 912:	08 95       	ret

00000914 <main>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 914:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 916:	84 b5       	in	r24, 0x24	; 36
 918:	82 60       	ori	r24, 0x02	; 2
 91a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 91c:	84 b5       	in	r24, 0x24	; 36
 91e:	81 60       	ori	r24, 0x01	; 1
 920:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 922:	85 b5       	in	r24, 0x25	; 37
 924:	82 60       	ori	r24, 0x02	; 2
 926:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 928:	85 b5       	in	r24, 0x25	; 37
 92a:	81 60       	ori	r24, 0x01	; 1
 92c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 92e:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
 932:	81 60       	ori	r24, 0x01	; 1
 934:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 938:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 93c:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
 940:	82 60       	ori	r24, 0x02	; 2
 942:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 946:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
 94a:	81 60       	ori	r24, 0x01	; 1
 94c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 950:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 954:	81 60       	ori	r24, 0x01	; 1
 956:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 95a:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
 95e:	84 60       	ori	r24, 0x04	; 4
 960:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 964:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
 968:	81 60       	ori	r24, 0x01	; 1
 96a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 96e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 972:	84 60       	ori	r24, 0x04	; 4
 974:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
		sbi(ADCSRA, ADPS1);
 978:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 97c:	82 60       	ori	r24, 0x02	; 2
 97e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
		sbi(ADCSRA, ADPS0);
 982:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 986:	81 60       	ori	r24, 0x01	; 1
 988:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 98c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 990:	80 68       	ori	r24, 0x80	; 128
 992:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 996:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
 99a:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <_ZN7TwoWire13rxBufferIndexE>
  rxBufferLength = 0;
 99e:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <_ZN7TwoWire14rxBufferLengthE>

  txBufferIndex = 0;
 9a2:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
 9a6:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <_ZN7TwoWire14txBufferLengthE>
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
 9aa:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <twi_state>
  twi_sendStop = true;    // default value
 9ae:	81 e0       	ldi	r24, 0x01	; 1
 9b0:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <twi_sendStop>
  twi_inRepStart = false;
 9b4:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <twi_inRepStart>
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
 9b8:	82 e1       	ldi	r24, 0x12	; 18
 9ba:	0e 94 82 00 	call	0x104	; 0x104 <digitalWrite.constprop.16>
  digitalWrite(SCL, 1);
 9be:	83 e1       	ldi	r24, 0x13	; 19
 9c0:	0e 94 82 00 	call	0x104	; 0x104 <digitalWrite.constprop.16>

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
 9c4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 9c8:	8e 7f       	andi	r24, 0xFE	; 254
 9ca:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
  cbi(TWSR, TWPS1);
 9ce:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 9d2:	8d 7f       	andi	r24, 0xFD	; 253
 9d4:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
 9d8:	88 e4       	ldi	r24, 0x48	; 72
 9da:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
 9de:	85 e4       	ldi	r24, 0x45	; 69
 9e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 9e4:	e0 91 ce 01 	lds	r30, 0x01CE	; 0x8001ce <Serial+0x10>
 9e8:	f0 91 cf 01 	lds	r31, 0x01CF	; 0x8001cf <Serial+0x11>
 9ec:	82 e0       	ldi	r24, 0x02	; 2
 9ee:	80 83       	st	Z, r24
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 9f0:	e0 91 ca 01 	lds	r30, 0x01CA	; 0x8001ca <Serial+0xc>
 9f4:	f0 91 cb 01 	lds	r31, 0x01CB	; 0x8001cb <Serial+0xd>
 9f8:	10 82       	st	Z, r1
  *_ubrrl = baud_setting;
 9fa:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <Serial+0xe>
 9fe:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <Serial+0xf>
 a02:	8f ec       	ldi	r24, 0xCF	; 207
 a04:	80 83       	st	Z, r24

  _written = false;
 a06:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <Serial+0x18>

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 a0a:	e0 91 d2 01 	lds	r30, 0x01D2	; 0x8001d2 <Serial+0x14>
 a0e:	f0 91 d3 01 	lds	r31, 0x01D3	; 0x8001d3 <Serial+0x15>
 a12:	86 e0       	ldi	r24, 0x06	; 6
 a14:	80 83       	st	Z, r24
  
  sbi(*_ucsrb, RXEN0);
 a16:	e0 91 d0 01 	lds	r30, 0x01D0	; 0x8001d0 <Serial+0x12>
 a1a:	f0 91 d1 01 	lds	r31, 0x01D1	; 0x8001d1 <Serial+0x13>
 a1e:	80 81       	ld	r24, Z
 a20:	80 61       	ori	r24, 0x10	; 16
 a22:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 a24:	e0 91 d0 01 	lds	r30, 0x01D0	; 0x8001d0 <Serial+0x12>
 a28:	f0 91 d1 01 	lds	r31, 0x01D1	; 0x8001d1 <Serial+0x13>
 a2c:	80 81       	ld	r24, Z
 a2e:	88 60       	ori	r24, 0x08	; 8
 a30:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 a32:	e0 91 d0 01 	lds	r30, 0x01D0	; 0x8001d0 <Serial+0x12>
 a36:	f0 91 d1 01 	lds	r31, 0x01D1	; 0x8001d1 <Serial+0x13>
 a3a:	80 81       	ld	r24, Z
 a3c:	80 68       	ori	r24, 0x80	; 128
 a3e:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 a40:	e0 91 d0 01 	lds	r30, 0x01D0	; 0x8001d0 <Serial+0x12>
 a44:	f0 91 d1 01 	lds	r31, 0x01D1	; 0x8001d1 <Serial+0x13>
 a48:	80 81       	ld	r24, Z
 a4a:	8f 7d       	andi	r24, 0xDF	; 223
 a4c:	80 83       	st	Z, r24
  // wait until twi is ready, become master receiver
 /* while(TWI_READY != twi_state){
    continue;
  }*/

  counter_1 =0x86;  //timeout 1 sec - 16 MHz
 a4e:	c6 e8       	ldi	r28, 0x86	; 134
    
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
 a50:	25 ee       	ldi	r18, 0xE5	; 229
 a52:	d2 2e       	mov	r13, r18
go2:



    
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
 a54:	35 ec       	ldi	r19, 0xC5	; 197
 a56:	c3 2e       	mov	r12, r19
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 a58:	40 e0       	ldi	r20, 0x00	; 0
 a5a:	e4 2e       	mov	r14, r20
 a5c:	40 e0       	ldi	r20, 0x00	; 0
 a5e:	f4 2e       	mov	r15, r20
  if ( -- counter_3 ) goto check1;
  return 0;
go1:

  
  twi_state = TWI_MRX;
 a60:	d1 e0       	ldi	r29, 0x01	; 1
  twi_sendStop = sendStop;
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
 a62:	33 24       	eor	r3, r3
 a64:	3a 94       	dec	r3

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
 a66:	55 e0       	ldi	r21, 0x05	; 5
 a68:	25 2e       	mov	r2, r21
 /* while(TWI_READY != twi_state){
    continue;
  }*/

  counter_1 =0x86;  //timeout 1 sec - 16 MHz
  counter_2 =0x46;
 a6a:	16 e4       	ldi	r17, 0x46	; 70
  counter_3 =0x02;
 a6c:	02 e0       	ldi	r16, 0x02	; 2
  // wait until twi is ready, become master receiver
 /* while(TWI_READY != twi_state){
    continue;
  }*/

  counter_1 =0x86;  //timeout 1 sec - 16 MHz
 a6e:	c0 93 9b 01 	sts	0x019B, r28	; 0x80019b <counter_1>
  counter_2 =0x46;
 a72:	10 93 9a 01 	sts	0x019A, r17	; 0x80019a <counter_2>
  counter_3 =0x02;
 a76:	00 93 99 01 	sts	0x0199, r16	; 0x800199 <counter_3>
check1:                                        
  if (TWI_READY == twi_state) goto go1;
 a7a:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <twi_state>
 a7e:	88 23       	and	r24, r24
 a80:	49 f1       	breq	.+82     	; 0xad4 <main+0x1c0>
  if ( -- counter_1 ) goto check1;
 a82:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <counter_1>
 a86:	81 50       	subi	r24, 0x01	; 1
 a88:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <counter_1>
 a8c:	81 11       	cpse	r24, r1
 a8e:	f5 cf       	rjmp	.-22     	; 0xa7a <main+0x166>
  if ( -- counter_2 ) goto check1;
 a90:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <counter_2>
 a94:	81 50       	subi	r24, 0x01	; 1
 a96:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <counter_2>
 a9a:	81 11       	cpse	r24, r1
 a9c:	ee cf       	rjmp	.-36     	; 0xa7a <main+0x166>
  if ( -- counter_3 ) goto check1;
 a9e:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <counter_3>
 aa2:	81 50       	subi	r24, 0x01	; 1
 aa4:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <counter_3>
 aa8:	81 11       	cpse	r24, r1
 aaa:	e7 cf       	rjmp	.-50     	; 0xa7a <main+0x166>
  return 0;
 aac:	b1 2c       	mov	r11, r1
    quantity = BUFFER_LENGTH;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
 aae:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <_ZN7TwoWire13rxBufferIndexE>
  rxBufferLength = read;
 ab2:	b0 92 bd 01 	sts	0x01BD, r11	; 0x8001bd <_ZN7TwoWire14rxBufferLengthE>
}

void loop() {
  Wire.requestFrom(8, 6);    // request 6 bytes from slave device #8

  while (Wire.available()) { // slave may send less than requested
 ab6:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <_ZN7TwoWire13rxBufferIndexE>
 aba:	b8 16       	cp	r11, r24
 abc:	09 f4       	brne	.+2      	; 0xac0 <main+0x1ac>
 abe:	7f c0       	rjmp	.+254    	; 0xbbe <main+0x2aa>
    char c = Wire.read(); // receive a byte as character
 ac0:	8b e5       	ldi	r24, 0x5B	; 91
 ac2:	92 e0       	ldi	r25, 0x02	; 2
 ac4:	0e 94 62 02 	call	0x4c4	; 0x4c4 <_ZN7TwoWire4readEv>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 ac8:	68 2f       	mov	r22, r24
 aca:	8e eb       	ldi	r24, 0xBE	; 190
 acc:	91 e0       	ldi	r25, 0x01	; 1
 ace:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_ZN14HardwareSerial5writeEh>
 ad2:	f1 cf       	rjmp	.-30     	; 0xab6 <main+0x1a2>
go1:

  
  twi_state = TWI_MRX;
 ad4:	d0 93 98 01 	sts	0x0198, r29	; 0x800198 <twi_state>
  twi_sendStop = sendStop;
 ad8:	d0 93 97 01 	sts	0x0197, r29	; 0x800197 <twi_sendStop>
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
 adc:	30 92 96 01 	sts	0x0196, r3	; 0x800196 <twi_error>

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
 ae0:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <twi_masterBufferIndex>
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
 ae4:	20 92 94 01 	sts	0x0194, r2	; 0x800194 <twi_masterBufferLength>
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
 ae8:	d0 93 93 01 	sts	0x0193, r29	; 0x800193 <twi_slarw>
  twi_slarw |= address << 1;
 aec:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <twi_slarw>
 af0:	80 61       	ori	r24, 0x10	; 16
 af2:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <twi_slarw>

  if (true == twi_inRepStart) {
 af6:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <twi_inRepStart>
 afa:	81 30       	cpi	r24, 0x01	; 1
 afc:	09 f0       	breq	.+2      	; 0xb00 <main+0x1ec>
 afe:	48 c0       	rjmp	.+144    	; 0xb90 <main+0x27c>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false;     // remember, we're dealing with an ASYNC ISR
 b00:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <twi_inRepStart>
    /* do {
      TWDR = twi_slarw;
    } while(TWCR & _BV(TWWC)); */

     counter_1 =0x86;  //timeout 1 sec - 16 MHz
 b04:	c0 93 9b 01 	sts	0x019B, r28	; 0x80019b <counter_1>
     counter_2 =0x46;
 b08:	10 93 9a 01 	sts	0x019A, r17	; 0x80019a <counter_2>
     counter_3 =0x02;
 b0c:	00 93 99 01 	sts	0x0199, r16	; 0x800199 <counter_3>
check2:  
  TWDR = twi_slarw;                                      
 b10:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <twi_slarw>
 b14:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
  if (!(TWCR & _BV(TWWC))) goto go2;
 b18:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 b1c:	83 ff       	sbrs	r24, 3
 b1e:	16 c0       	rjmp	.+44     	; 0xb4c <main+0x238>
  if ( -- counter_1 ) goto check2;
 b20:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <counter_1>
 b24:	81 50       	subi	r24, 0x01	; 1
 b26:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <counter_1>
 b2a:	81 11       	cpse	r24, r1
 b2c:	f1 cf       	rjmp	.-30     	; 0xb10 <main+0x1fc>
  if ( -- counter_2 ) goto check2;
 b2e:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <counter_2>
 b32:	81 50       	subi	r24, 0x01	; 1
 b34:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <counter_2>
 b38:	81 11       	cpse	r24, r1
 b3a:	ea cf       	rjmp	.-44     	; 0xb10 <main+0x1fc>
  if ( -- counter_3 ) goto check2;
 b3c:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <counter_3>
 b40:	81 50       	subi	r24, 0x01	; 1
 b42:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <counter_3>
 b46:	81 11       	cpse	r24, r1
 b48:	e3 cf       	rjmp	.-58     	; 0xb10 <main+0x1fc>
 b4a:	b0 cf       	rjmp	.-160    	; 0xaac <main+0x198>
go2:



    
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
 b4c:	c0 92 bc 00 	sts	0x00BC, r12	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // wait for read operation to complete
  /*while(TWI_MRX == twi_state){
    continue;
  }*/
  counter_1 =0x86;  //timeout 1 sec - 16 MHz
 b50:	c0 93 9b 01 	sts	0x019B, r28	; 0x80019b <counter_1>
  counter_2 =0x46;
 b54:	10 93 9a 01 	sts	0x019A, r17	; 0x80019a <counter_2>
  counter_3 =0x02;
 b58:	00 93 99 01 	sts	0x0199, r16	; 0x800199 <counter_3>
check3:  
  if (TWI_MRX != twi_state) goto go3;
 b5c:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <twi_state>
 b60:	81 30       	cpi	r24, 0x01	; 1
 b62:	c9 f4       	brne	.+50     	; 0xb96 <main+0x282>
  if ( -- counter_1 ) goto check3;
 b64:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <counter_1>
 b68:	81 50       	subi	r24, 0x01	; 1
 b6a:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <counter_1>
 b6e:	81 11       	cpse	r24, r1
 b70:	f5 cf       	rjmp	.-22     	; 0xb5c <main+0x248>
  if ( -- counter_2 ) goto check3;
 b72:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <counter_2>
 b76:	81 50       	subi	r24, 0x01	; 1
 b78:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <counter_2>
 b7c:	81 11       	cpse	r24, r1
 b7e:	ee cf       	rjmp	.-36     	; 0xb5c <main+0x248>
  if ( -- counter_3 ) goto check3;
 b80:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <counter_3>
 b84:	81 50       	subi	r24, 0x01	; 1
 b86:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <counter_3>
 b8a:	81 11       	cpse	r24, r1
 b8c:	e7 cf       	rjmp	.-50     	; 0xb5c <main+0x248>
 b8e:	8e cf       	rjmp	.-228    	; 0xaac <main+0x198>
    
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
 b90:	d0 92 bc 00 	sts	0x00BC, r13	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 b94:	dd cf       	rjmp	.-70     	; 0xb50 <main+0x23c>
  if ( -- counter_2 ) goto check3;
  if ( -- counter_3 ) goto check3;
  return 0;
go3:

  if (twi_masterBufferIndex < length)
 b96:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <twi_masterBufferIndex>
 b9a:	96 e0       	ldi	r25, 0x06	; 6
 b9c:	b9 2e       	mov	r11, r25
 b9e:	86 30       	cpi	r24, 0x06	; 6
 ba0:	10 f4       	brcc	.+4      	; 0xba6 <main+0x292>
    length = twi_masterBufferIndex;
 ba2:	b0 90 95 01 	lds	r11, 0x0195	; 0x800195 <twi_masterBufferIndex>
 ba6:	a2 e7       	ldi	r26, 0x72	; 114
 ba8:	b1 e0       	ldi	r27, 0x01	; 1
 baa:	ec e9       	ldi	r30, 0x9C	; 156
 bac:	f1 e0       	ldi	r31, 0x01	; 1

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
 bae:	80 e0       	ldi	r24, 0x00	; 0
 bb0:	8b 15       	cp	r24, r11
 bb2:	09 f4       	brne	.+2      	; 0xbb6 <main+0x2a2>
 bb4:	7c cf       	rjmp	.-264    	; 0xaae <main+0x19a>
    data[i] = twi_masterBuffer[i];
 bb6:	9d 91       	ld	r25, X+
 bb8:	91 93       	st	Z+, r25

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
 bba:	8f 5f       	subi	r24, 0xFF	; 255
 bbc:	f9 cf       	rjmp	.-14     	; 0xbb0 <main+0x29c>
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint32_t start = micros();
 bbe:	0e 94 dd 01 	call	0x3ba	; 0x3ba <micros>
 bc2:	2b 01       	movw	r4, r22
 bc4:	3c 01       	movw	r6, r24
 bc6:	84 ef       	ldi	r24, 0xF4	; 244
 bc8:	88 2e       	mov	r8, r24
 bca:	99 24       	eor	r9, r9
 bcc:	93 94       	inc	r9
 bce:	a1 2c       	mov	r10, r1
 bd0:	b1 2c       	mov	r11, r1

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
 bd2:	0e 94 dd 01 	call	0x3ba	; 0x3ba <micros>
 bd6:	64 19       	sub	r22, r4
 bd8:	75 09       	sbc	r23, r5
 bda:	86 09       	sbc	r24, r6
 bdc:	97 09       	sbc	r25, r7
 bde:	68 3e       	cpi	r22, 0xE8	; 232
 be0:	73 40       	sbci	r23, 0x03	; 3
 be2:	81 05       	cpc	r24, r1
 be4:	91 05       	cpc	r25, r1
 be6:	a8 f3       	brcs	.-22     	; 0xbd2 <main+0x2be>
			ms--;
 be8:	21 e0       	ldi	r18, 0x01	; 1
 bea:	82 1a       	sub	r8, r18
 bec:	91 08       	sbc	r9, r1
 bee:	a1 08       	sbc	r10, r1
 bf0:	b1 08       	sbc	r11, r1
			start += 1000;
 bf2:	88 ee       	ldi	r24, 0xE8	; 232
 bf4:	48 0e       	add	r4, r24
 bf6:	83 e0       	ldi	r24, 0x03	; 3
 bf8:	58 1e       	adc	r5, r24
 bfa:	61 1c       	adc	r6, r1
 bfc:	71 1c       	adc	r7, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
 bfe:	81 14       	cp	r8, r1
 c00:	91 04       	cpc	r9, r1
 c02:	a1 04       	cpc	r10, r1
 c04:	b1 04       	cpc	r11, r1
 c06:	29 f7       	brne	.-54     	; 0xbd2 <main+0x2be>
 c08:	e1 14       	cp	r14, r1
 c0a:	f1 04       	cpc	r15, r1
 c0c:	09 f4       	brne	.+2      	; 0xc10 <main+0x2fc>
 c0e:	2f cf       	rjmp	.-418    	; 0xa6e <main+0x15a>
 c10:	0e 94 3a 01 	call	0x274	; 0x274 <_Z17Serial0_availablev>
 c14:	88 23       	and	r24, r24
 c16:	09 f4       	brne	.+2      	; 0xc1a <main+0x306>
 c18:	28 cf       	rjmp	.-432    	; 0xa6a <main+0x156>
 c1a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 c1e:	25 cf       	rjmp	.-438    	; 0xa6a <main+0x156>

00000c20 <__tablejump2__>:
 c20:	ee 0f       	add	r30, r30
 c22:	ff 1f       	adc	r31, r31
 c24:	05 90       	lpm	r0, Z+
 c26:	f4 91       	lpm	r31, Z
 c28:	e0 2d       	mov	r30, r0
 c2a:	09 94       	ijmp

00000c2c <_exit>:
 c2c:	f8 94       	cli

00000c2e <__stop_program>:
 c2e:	ff cf       	rjmp	.-2      	; 0xc2e <__stop_program>
